<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Thoughts of Geoff]]></title>
  <link href="http://geopet.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://geopet.github.com/"/>
  <updated>2012-08-29T12:15:40-06:00</updated>
  <id>http://geopet.github.com/</id>
  <author>
    <name><![CDATA[Geoff Petrie]]></name>
    <email><![CDATA[g.petrie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a Service Using Automator for nvALT Notes Version Control]]></title>
    <link href="http://geopet.github.com/blog/2011/09/21/creating-a-service-using-automator-for-nvalt-notes-version-control/"/>
    <updated>2011-09-21T08:00:00-06:00</updated>
    <id>http://geopet.github.com/blog/2011/09/21/creating-a-service-using-automator-for-nvalt-notes-version-control</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>I'm going to get a pretty nerdy here for a moment.</p>

<p>So I dove in and I'm now using <a href="http://brettterpstra.com/project/nvalt/">nvALT</a>, <a href="http://www.secondgearsoftware.com/elements/">Elements</a> and <a href="http://git-scm.com/">Git</a> for
my note taking needs. Aside from a few minor hiccups, which I'll address
in a later post, this is really working nicely.</p>

<p>The one thing that I needed when I added nvALT and Elements to my note
taking workflow was the ability to easily continue version control with
Git. Before taking on this new process I was using Git in my notes
directory and I wasn't about to lose that option now.</p>

<p>But the ease which nvALT allows me to create new text files, and with
nvALT built to work better with <a href="http://brettterpstra.com/break-up-your-text-documents/">smaller files</a>, I need some way to get my
version control under control.<a href="For">^version</a></p>

<p>Here's what my workflow was:</p>

<ol>
<li>Work, notes, work, notes.</li>
<li>Work, notes, work, notes.</li>
<li>Look at the time.</li>
<li><em>Damn! How long has it been since I last did a commit?</em></li>
<li>cd to my notes directory.</li>
<li>Commit my notes to my repository.</li>
</ol>


<p>It wasn't really precision based. Plus it had the added detriment of
taking me out of what I was doing to commit my notes.</p>

<p>What I did<a href="My">^original</a> was create a Bash script and then used Automator to create a
Service for it that I also applied a keyboard shortcut to.</p>

<p>If you're still with me, here's how I did it:</p>

<h2>The Reveal</h2>

<p>First<a href="This">^realfirst</a>, create your Bash script.</p>

<p>I keep all my notes in one directory. This is the way that nvALT and, it
seems, Elements like to work. With some light taxonomy (ala <a href="http://macpowerusers.com/2011/03/mpu-046-workflows-with-merlin-mann-ii/">Merlin Mann
and Mac Power Users</a>) I have a reasonably good system in place. All
my notes are in a <a href="http://db.tt/eOrvceA">Dropbox</a> subdirectory called "notes."</p>

<p>To get this to work I created a Bash script named <code>git_notes.sh</code> and put
this in it:</p>

<pre><code>#!/bin/bash

cd /Users/username/Dropbox/notes/
git add .
git commit -m 'nvALT Service Commit'
echo "* "`date`" nvALT Commit" &gt;&gt; /Users/username/Dropbox/notes/noteCommits`date "+%Y%m%d"`.md
</code></pre>

<p>Now, you'll see that this is redundant and probably a lot silly, but
this is what it does.</p>

<ol>
<li>It makes sure that we'r in my notes directory using the absolute pathname.</li>
<li>It stages only the modified files to the repository.<a href="This">^keypoint</a></li>
<li>It commits those changes and uses a standard message for my Git
log file.</li>
<li>The last line is where it gets a little silly, it appends to another
file in the same Dropbox subdirectory with a message that also gives a
human readable date/time. Why am I doing this? I don't know, maybe
someday I'll set up something to parse it to get some analytics of when
I do most of my commits for my notes file.</li>
</ol>


<p>But now that we have our Bash script. The rest is <em>trivial</em>.</p>

<p>First, we open <a href="http://support.apple.com/kb/ht2488">Automator</a> and select "Service" as our document type
under the "Choose a type for your document:"</p>

<p><img src="../images/creating-a-service-01.png" alt="" /></p>

<p>Next, we're going to change the "Service receives" from the default
"text" to "no input". Leave the "in" "any application" as it is.</p>

<p><img src="../images/creating-a-service-02.png" alt="" /></p>

<p>Penultimately, we click "Utilities" under the left-side "Library" dropdown and
then drag the "Run Shell Script" from the middle column over to the
right side.</p>

<p><img src="../images/creating-a-service-03.png" alt="" /></p>

<p>Lastly, we enter in the location of the script in the workflow. It's a
good idea to use the absolute pathname here. In my case it was
<code>/Users/username/Dropbox/notes/git_notes.sh</code>.</p>

<p>Once you save you'll have a Service that will be available from any
of your application menus. Click on the Service and it will do a Git
commit of all the changes to that notes directory as well as update the
faux log file we've created for the day.</p>

<p><img src="../images/creating-a-service-04.png" alt="" /></p>

<p>But I don't like to use the mouse/trackpad that much. So the final touch
to this is to create a keyboard shortcut in your System Preferences. Go
to <code>Applications &gt; System Preferences &gt; Keyboard</code>. Then choose "Keyboard
Shortcuts" and select "Services" from the left side. Your new Service
should be at the end of the Services listings. Just click the blank
space at the far end of the window and you should get a text input
field. You can use anything you want for your shortcut, but I chose
control-option-command-shift-s for mine to avoid any chance of a
keyboard conflict.</p>

<p><img src="../images/creating-a-service-05.png" alt="" /></p>

<h2>Conclusion</h2>

<p>So there you have it. A quick and dirty way to make sure that the notes
you're producing will be version controlled through Git. As a final
remark, I'll say that having version control has already paid off for
me.</p>

<p>I use multiple computers and I made the <em>huge</em> mistake of accidentally
deleting a bunch of files when a prompt popped up and I didn't read
exactly what it said. All of a sudden 20-some-odd notes of mine were
<em>gone</em>. But version control to the rescue! I <em>knew</em> I had just committed
to my repo before I had deleted the files and I was able to pull them
back from brink of deletion hell. But this was even easier than it could
have been because I had been using <code>git add .</code> instead of <code>git add -a</code>.
All it meant was that I needed to unstage the deleted files. It was
great and a perfect reason why doing something like this makes sense.</p>

<h2>Post Script</h2>

<p>I should add that the use of a common/standard commit message is bad
practice. The reason I do this, instead of throwing a prompt so that I
can enter in a more detailed message, is that this is supposed to create
a workflow that won't interrupt what you're in the middle of but give
you the peace of mind that you've got things in a version controlled
environment. This <em>does not</em> prevent you from going to your notes
directory and doing a proper Git commit with a detailed message on what
you've done since your last commit. In fact, at the end of this
paragraph I'll be committing properly to say that this draft is
finished. And when I finish my review of the draft I'll commit again,
and message that it is ready for posting. After that, I'll probably do a
name change to the file (this is the taxonomy thing I mentioned before)
and then do another <em>proper</em> commit.</p>

<p>One last point: You may have noticed that you can easily change the Bash
script to point to any directory you want. Once you have the Service in
place, you can edit your <code>.sh</code> file whenever you please and have a
temporary keyboard shortcut for Git repo commits. I think that's kinda
cool.</p>

<p>If you don't have one and want to learn how, you can check out my
<a href="http://faceofgeoff.com/post/5383300462/learning-git">post</a> on the subject of Git.</p>

<p>and then have it run through <a href="http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/launchctl.1.html">launchctl</a> on a regular basis.</p>

<p>staging any files for <em>deletion</em> only modification. This means I won't
worry about any files going away without my knowing.</p>

<p><em>I originally posted this tutorial on my Tumblr: <a href="http://faceofgeoff.com/post/10480335918/creating-a-service-using-automator-for-nvalt-notes">The Face of Geoff</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Git]]></title>
    <link href="http://geopet.github.com/blog/2011/05/10/learning-git/"/>
    <updated>2011-05-10T10:30:00-06:00</updated>
    <id>http://geopet.github.com/blog/2011/05/10/learning-git</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>For the record, much of this is unabashedly lifted from <em>Pro Git</em> book I
can't even remotely suggest that this content is original to me. Sure,
I've added my own two cents now and then, but do yourselves a favor and
read the first three chapters of <a href="http://progit.org/book">Pro Git</a>. In
fact, if any of this doesn't make sense, it is probably because I
haven't correctly paraphrased <em>Pro Git</em> and you should just consult the
book in that case.</p>

<p>One thing you'll definitively need to use Git locally is Git running on
your computer. There are lots of tutorials and ways to do it, I think
<a href="http://progit.org/book/ch1-4.html">this tutorial</a> will work or you can
<a href="http://git-scm.com/">just go to the source</a> and download the latest
stable release of Git.</p>

<p>The other item that you'll likely find useful in using Git as well as
for many other things, is a <a href="http://db.tt/eOrvceA">Dropbox account</a>. By
using Git in a Dropbox managed folder you get your own local repository
in the cloud. The Basic account type is free and comes with 2GB of
storage. That's probably plenty if you plan to mainly do textish style
file management. If it isn't enough space, hey, just get a paid account.
The service is awesome. The link that I give for the Dropbox account is
a referral link for me. It just me an extra 250MB of storage to my
account if you use it. If you'd rather not use that link then try
<a href="http://www.dropbox.com">http://www.dropbox.com</a>. I picked up this tip when I attended a
Webuquerque called <em>Getting With Git</em> that was presented by <a href="http://www.randomthink.net/">Brian
Arnold</a>.</p>

<p>Finally, this is not supposed to be a full explanation of how to use
Git. If you want that, as I said above, read the first few chapters of
<a href="http://progit.org/book">Pro Git</a>. The purpose of this is to touch on
basics of getting started and some of the more common commands. I used
Git while writing this document and I really enjoyed its simplicity.
From my perspective, this is worth your time to understand.</p>

<!-- more -->


<h2>Getting Started</h2>

<p>After installation of Git on your system you need to configure Git with
identities for your machine:</p>

<pre><code>$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
$ git config --global core.editor vim
</code></pre>

<p>This will give the repo info on who you are and what your editor of
choice is.</p>

<pre><code>$ git config --list
user.name=Geoff Petrie
user.email=gpetrie@email.com
core.editor=vim
</code></pre>

<p>To get help:</p>

<pre><code>$ git help &lt;verb&gt;
</code></pre>

<p>eg,</p>

<pre><code>$ git help config
$ git help commit
$ git help branch
$ git help tag
</code></pre>

<p>To start tracking an existing project locally go to the directory/folder
in your command line and enter this command:</p>

<pre><code>$ git init
</code></pre>

<p>This will create the .git subdirectory/subfolder, but nothing is
actually being tracked by Git yet. To begin tracking:</p>

<pre><code>$ git add *.php
$ git add *.docx
$ git add awesome_documentation.txt
$ git commit -m "adding documents to be version controlled"
</code></pre>

<p>In that previous command you added all the .php files in the directory
you ran the <code>git init</code> command in, all the .docx (Word) files and a text
file called <code>awesome_documentation.txt</code>. Then you committed those
documents to your local repository with the <code>git commit</code> command.</p>

<p>Congratulations, you're now version controlling your work.</p>

<p>Another command you should know:</p>

<pre><code>$ git status
</code></pre>

<p>This will let you know whether you have a file(s) in the staging area
and ready to check in or something that has been tracked, has been
changed, but isn't in the staging area or you have untracked files in
the directory you ran <code>$ git init</code>.</p>

<pre><code>$ git diff
</code></pre>

<p>This command will show what you've changed but haven't staged yet.</p>

<pre><code>$ git commit
</code></pre>

<p><code>git commit</code> commits your changes to your local repo. In this case it
will also launch your editor of choice where you will enter in a note
regarding the changes to the document you've made. When you save and
quit the editor your commit will be completed. To avoid launching your
editor add the <code>-m</code> flag:</p>

<pre><code>$ git commit -m "these changes will revolutionize the fashion industry."
</code></pre>

<p>Adding the <code>-a</code> flag to your commit will allow you to avoid the staging
area and commit files that have been modified immediately:</p>

<pre><code>$ git commit -a -m "this will commit straight into my repo, no staging required."

$ git rm file.txt
</code></pre>

<p>Removes <code>file.txt</code> from your repo (and from your working directory).</p>

<pre><code>$ git rm --cached file.txt
</code></pre>

<p>Removes <code>file.txt</code> from your repo but <em>not</em> from your working directory.
(Good for when you may have accidentally added a bunch of files in your
repo that you didn't want to track, like complied files or admin text
files that you meant to put in your <code>.gitignore</code>.</p>

<pre><code>$ git mv file_from file_to
</code></pre>

<p>This is tied for my favorite command in Git. It renames the file and on
your next commit it renames it in your repo <em>and</em> your working
directory. So sexy. (My other favorite Git command is <code>$ git checkout -b
new_branch</code>, which I will get to in a moment.)</p>

<p>Here's how you can find out the changes that have taken place in your
repo:</p>

<pre><code>$ git log

$ git log -p -2
</code></pre>

<p>The <code>-p -2</code> shows a diff and only the last two commits.</p>

<pre><code>$ git log --stat
</code></pre>

<p>Gives abbreviated stats for each commit.</p>

<p>The <code>--pretty</code> option allows you to use a prebuilt style or a style you
design to display the log. A pretty slick prebuilt is <code>oneline</code>:</p>

<pre><code>$ git log --pretty=oneline
</code></pre>

<p>Oooh. This is pretty awesome, too:</p>

<pre><code>$ git log --pretty=format:"%h - %an, %ar : %s"

$ git log --since-2.weeks
</code></pre>

<p>This gives you only the changes that have happened in the last couple of
weeks.</p>

<p>The following commands allow you to commit a bunch of files, and then
add a file or two that you forgot to add in that last commit and add
them to that previous commit so that they all live happily ever after in
the same commit:</p>

<pre><code>$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
</code></pre>

<p>Sometimes you need to remove files from the staging area:</p>

<pre><code>$ git reset HEAD file_I_do_not_want.py
</code></pre>

<p>If you don't want to keep the changes to the file you have in the
staging area you can just revert the file back to the way it was in the
previous commit. <em>Be careful</em> this is not something you can undo:</p>

<pre><code>$ git checkout -- file_I_want_to_change_back.py
</code></pre>

<h2>Tags</h2>

<p>Oh man. Now we're moving forward. Let's chat about <em>tagging</em>. Tagging is a
great place to mark a specific point in your version history as
important. This is perfect for a release point, i.e., v1.0.</p>

<p>To list the tags in Git you just fire off this command:</p>

<pre><code>$ git tag
v0.9
v1.0
v1.1
</code></pre>

<p>To annotate a tag:</p>

<pre><code>$ git tag -a v1.4 -m 'my version 1.4 is the best thing ever.'
</code></pre>

<p>Here's how you see the data:</p>

<pre><code>$ git show v1.4
</code></pre>

<p>You can also tag a commit later in its life:</p>

<pre><code>$ git log --pretty=oneline
9352eecf208721b29e73527219b64a5cbd175918 changes to april_notes, readded (with c
9a4ccbebdcd934123831eb2ab4e1a6031d391c9a changes to iss53, newtest and april_not
d8dddfe59b90fc80bc66571fe5364a40c0012503 Adding the newtest.markdown and complet

$ git tag -a v1.1.0 9a4ccbe
</code></pre>

<p>Note you take the first part of that crazy list of numbers and letters
(the checksum) and add it to the end so that Git can identify which
commit you want to tag. God, isn't that simplicity awesome?</p>

<h2>Branching</h2>

<p>Now, let's talk about <em>branching</em>.</p>

<p>For a more detailed discussion into branching, take a look at the
branching chapter in the <a href="http://progit.org/book/ch3-1.html">Git Pro
book</a>. For this discussion, I'm going
to show you the basic commands and what they do.</p>

<pre><code>$ git branch
</code></pre>

<p>Lists the branches already in your repository. Keep in mind that the
branch you'll likely find yourself in at first is your "master" branch.
This isn't necessarily the one you'll be spending the most of your time
in, but it is the default.</p>

<pre><code>$ git branch name_of_new_branch
</code></pre>

<p>This creates a new branch, eg, <code>$ git branch testing</code> will create the
branch "testing."</p>

<pre><code>$ git checkout testing
</code></pre>

<p>This changes the branch you are working on to the testing branch. The
master branch is the common branch that you would normally be working
in until you checkout another branch.</p>

<pre><code>$ git checkout -b new_branch
</code></pre>

<p>This is a shorthand command to create and checkout a new branch. <em>Very
handy.</em></p>

<pre><code>$ git merge &lt;branch name&gt;
</code></pre>

<p>This command allows you to merge into your current branch another
branch's work.</p>

<pre><code>$ git branch -d &lt;branch name&gt;
</code></pre>

<p>The -d flag allows you to delete a branch.</p>

<p>Things get a little complex when you attempt to merge files that have
been changed in the same place in different branches. You'll likely get
something like this:</p>

<pre><code>$ git merge doc_test
Auto-merging newtest.markdown
CONFLICT (content): Merge conflict in newtest.markdown
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p>Here you'll want to run <code>$ git status</code> to find out what issue is. You'll
see something like this:</p>

<pre><code>$ git status
# On branch master
# Changes to be committed:
#
#   new file:   testfile1.txt
#   new file:   testfile2.md
#   new file:   testfile3.php
#
# Unmerged paths:
#   (use "git add/rm &lt;file&gt;..." as appropriate to mark resolution)
#
#   both modified:      newtest.markdown
</code></pre>

<p>For more information you can also run <code>$ git diff</code> to see what changes
are actually in play here.</p>

<pre><code>$ git mergetool
</code></pre>

<p>The mergetool will launch an appropriate visual merging tool that will
walk you through the conflicts.</p>

<p>One piece that I didn't cover earlier is how to revert back to a
different version of a file. To do this it requires a few different
commands.</p>

<p>First we want to check out the logs to see what changes we've committed.
After that we can use <code>diff</code> to see the difference in the files. Once
we're sure we are reverting to the correct version we use the <code>checkout</code>
command.</p>

<pre><code>$ git log
commit 9e3b120796ed005f7542a73b20119870c8a966f7
Author: Geoff Petrie &lt;gpetrie@email.edu&gt;
Date:   Wed May 4 15:21:23 2011 -0600

    testing this commit after reverting to an older git_info.md file.

commit cfd3c3980d5c04e976fbf7b3ab7a36e277b75259
Author: Geoff Petrie &lt;gpetrie@email.edu&gt;
Date:   Wed May 4 13:46:53 2011 -0600

    adding new commands, about to try reverting back a commit.

commit 5407fc34f57f6dc6517a38194efa1a589f9a09ad
Author: Geoff Petrie &lt;gpetrie@email.edu&gt;
Date:   Wed May 4 13:17:13 2011 -0600

    a little change in the git doc

commit 62d8d7e8fc12fcd0f1cfc170a1a847f622514e34
Merge: c0ec484 6aa6a00
Author: Geoff Petrie &lt;gpetrie@email.edu&gt;
Date:   Wed May 4 13:12:59 2011 -0600
</code></pre>

<p>We now have a nice list of a few previous commits.</p>

<pre><code>git diff 5407fc34f57f6dc6517a38194efa1a589f9a09ad git_info.md 
diff --git a/git_info.md b/git_info.md
index 31f9fb0..d6d71fd 100644
--- a/git_info.md
+++ b/git_info.md
@@ -248,3 +248,10 @@ The mergetool will launch an appropriate visual merging tool that will
 walk you through the conflicts.

 This concludes the basics of how to get started
+
+Other handy commands:
+
+    $ git log --abbrev-commit --pretty=oneline
+
+Provides an abbreviated SHA-1 of your git log, a nice thing to have when
+you're trying to choose specific commits.
</code></pre>

<p>Now we have our diff in the file we're interested in reverting back.</p>

<pre><code>$ git checkout 5407fc34f57f6dc6517a38194efa1a589f9a09ad git_info.md
</code></pre>

<p>This brings the git info.md file into our current working directory from
here we can now make changes to that file or commit immediately. The
beauty? If we're unhappy with this, we can just revert back to the
previous commit through the same process.</p>

<p>A word of warning: You <strong>can</strong> lose data this way. Anything you've
committed to your repository you won't lose, but if you're working on a
file and then decide to mess with its version without committing, you'll
lose the work you've done. Good rule of thumb with version control: Just
commit your work.</p>

<p>This concludes the basics of how to get started with git. Something that
I haven't covered here is how to manage a repository that is remote like
on GitHub or some other server. I may get to this later, but that is
definitely outside the scope of this document.</p>

<p>If you find something here that doesn't make sense or you believe is incorrect, please feel free to let me know.</p>

<h2>Command list:</h2>

<p>I'm going to list a few commands here that you can use as a quick
reference. You may find this link to <a href="http://git-scm.com/documentation">Git
Documentation</a> more useful. Scroll to
the bottom of that link for the command list.</p>

<pre><code>$ git config --list
$ git init
$ git add *.php
$ git commit -m "adding documents to be version controlled"
$ git commit -a -m "using the -a flag is a shortcut"
$ git status
$ git diff
$ git rm file.txt
$ git rm --cached file.txt
$ git mv file_from file_to
$ git log
$ git log --pretty=oneline
$ git tag -a v1.4 -m 'my version 1.4 is the best thing ever.'
$ git branch name_of_new_branch
$ git checkout -b new_branch
$ git merge &lt;branch name&gt;
$ git branch -d &lt;branch name&gt;
$ git merge &lt;branch name&gt;
$ git mergetool
$ git checkout &lt;SHA-1&gt; &lt;file name&gt;
</code></pre>

<p>Another handy command:</p>

<pre><code>$ git log --abbrev-commit --pretty=oneline
</code></pre>

<p>Provides an abbreviated SHA-1 of your git log, a nice thing to have when
you're trying to choose specific commits.</p>
]]></content>
  </entry>
  
</feed>
