<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objects | Thoughts of Geoff]]></title>
  <link href="http://geopet.github.com/blog/categories/objects/atom.xml" rel="self"/>
  <link href="http://geopet.github.com/"/>
  <updated>2012-09-26T00:17:47-06:00</updated>
  <id>http://geopet.github.com/</id>
  <author>
    <name><![CDATA[Geoff Petrie]]></name>
    <email><![CDATA[g.petrie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Ruby Hashes Case]]></title>
    <link href="http://geopet.github.com/blog/2012/09/25/the-ruby-hashes-case/"/>
    <updated>2012-09-25T23:55:00-06:00</updated>
    <id>http://geopet.github.com/blog/2012/09/25/the-ruby-hashes-case</id>
    <content type="html"><![CDATA[<p>Contrary to the date listed, the <a href="http://blog.geoffpetrie.com/blog/2012/09/25/python-dictionaries/">previous post</a> about Python and dictionaries and PHP and associative arrays was written a few weeks back. I've since been spending more time with Ruby than with Python since.</p>

<p>After posting that article about how tight the Python code was in order to build a string with just the right number of semicolons, I decided to see if I could do the same thing with Ruby.</p>

<p>This is the solution I came up with:</p>

<pre><code>hash = {"server"=&gt;"gpetrie", "database"=&gt;"localhost", "uid"=&gt;"sa", "pwd"=&gt;"secret"}

hash.each do |key, val|
  if hash.length == 1
    print "#{key}=#{val}\n"
  else
    print "#{key}=#{val}; "
    hash.delete(key)
  end
end
</code></pre>

<p>I think I'm missing something here that would make this code much tighter. This looks very similar to the PHP code that I wrote as the solution in my previous article. There's got to be a method that I'm not using that would allow me to dismiss the <code>delete</code> and the <code>hash.length</code> that I am using.</p>

<p>If you have thoughts or suggestions, hit me up on <a href="https://twitter.com/geopet">Twitter</a> and let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Dictionaries, PHP Associative Arrays and Python Objects]]></title>
    <link href="http://geopet.github.com/blog/2012/09/25/python-dictionaries/"/>
    <updated>2012-09-25T20:47:00-06:00</updated>
    <id>http://geopet.github.com/blog/2012/09/25/python-dictionaries</id>
    <content type="html"><![CDATA[<p>If you read my previous post on <a href="http://blog.geoffpetrie.com/blog/2012/08/29/on-the-problems-of-education-in-a-developers-world/">the challenge of education as a developer</a>, you'll know about my interested in the Python language and syntax. I have had a reason to look at Python again recently and it's pretty amazing what I had forgotten about the language.</p>

<p>Now I'll admit that my understanding of object models and design patterns isn't the finest. But as I was going through my Python refresher I had a bit of an aha moment.</p>

<p>It was this line of code that struck me as pretty significant:</p>

<pre><code>return ";".join(["%s=%s" % (k, v) for k, v in params.items()])
</code></pre>

<p>This code came from the <a href="http://www.diveintopython.net/native_data_types/summary.html">Dive into Python</a> website.</p>

<p>While it doesn't look remarkable on the surface, knowing that <em>everything in Python is an object</em> (like Ruby and Javascript) you'll appreciate how cool that line of code is. Specifically the <code>";"</code> piece of it.</p>

<p>That <code>.join</code> method is called <em>by</em> that semicolon. That's pretty cool.</p>

<p>To demonstrate the importance of this piece, I decided to see how I could actually produce the same results that line of code does in PHP.</p>

<p>So that you understand the whole piece to this, the <code>params</code> variable is actually a dictionary (aka, an associative array in PHP) created in a small module. The variable is:</p>

<pre><code>params = {"server":"gpetrie", \
          "database":"localhost", \
          "uid":"sa", \
          "pwd":"secret" \
         }
</code></pre>

<p>The output from <code>return ";".join(["%s=%s" % (k, v) for k, v in params.items()])</code> is:</p>

<pre><code>pwd=secret;database=localhost;uid=sa;server=gpetrie
</code></pre>

<p>So the piece we're going to focus on is how that last tuple is printed. You see that? <code>server=gpetrie</code>. There's no semicolon at the end of that. That's because the semicolon is the object calling the <code>.join</code> method.</p>

<p>How can I produce this same output using PHP and an associative array?</p>

<p>If I were to do something like this:</p>

<pre><code>$myParams = array("server"=&gt;"gpetrie", 
                  "database"=&gt;"localhost", 
                  "uid"=&gt;"sa", 
                  "pwd"=&gt;"secret");
</code></pre>

<p>to initialize the PHP script, and then follow it up with something like this:</p>

<pre><code>$str = "";

foreach ($myParams as $k=&gt;$v) {
  $str .= "$k:$v; "
}  

print_r($str);
</code></pre>

<p>We wouldn't get what we wanted. We'd get this:</p>

<pre><code>server:gpetrie; database:localhost; uid:sa; pwd:secret; 
</code></pre>

<p>That semicolon at the end. That's the problem.</p>

<p>So we try something a little more complex:</p>

<pre><code>$myParams = array("server"=&gt;"gpetrie", 
                  "database"=&gt;"localhost", 
                  "uid"=&gt;"sa", 
                  "pwd"=&gt;"secret");

$arrayCount = count($myParams);
$arrayKeys  = array_keys($myParams);

for ($i=0; $i&lt;$arrayCount; $i++) {
  $arrayKey = $arrayKeys[$i];
  $str .= $arrayKey.':'.$myParams[$arrayKey].';';
}

print_r($str);
</code></pre>

<p>But it doesn't work either. We get:</p>

<pre><code>server:gpetrie; database:localhost; uid:sa; pwd:secret; 
</code></pre>

<p>as our output.</p>

<p>That <em>semicolon</em>!!!</p>

<p>Now I could be way off here. There is likely a far more elegant solution to this than I did, but this is the solution I came up with to produce the same output as the one line from Python:</p>

<pre><code>$myParams = array("server"=&gt;"gpetrie", 
                  "database"=&gt;"localhost", 
                  "uid"=&gt;"sa", 
                  "pwd"=&gt;"secret");

for ($i=0; $i&lt;=$arrayCount--; $i++) {
  $arrayKey = $arrayKeys[$i];
  $str .= $arrayKey.':'.$myParams[$arrayKey].';';
  unset($myParams[$arrayKey]);
}

$str .= key($myParams).':'.$myParams[key($myParams)];

print_r($str);
</code></pre>

<p>And now we get the result we want:</p>

<pre><code>server:gpetrie;database:localhost;uid:sa;pwd:secret
</code></pre>

<p>No semicolon at the end.</p>

<p>Now don't misunderstand the point of this. This isn't a Python versus PHP thing. This is just to show the interesting power of having everything as an object in Python and how much lighter your code can be because of it. Of course if you have a better solution to this than I do, please let me know. I'd love to see it.</p>
]]></content>
  </entry>
  
</feed>
