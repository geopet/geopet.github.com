<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hashes | Thoughts of Geoff]]></title>
  <link href="http://geopet.github.io/blog/categories/hashes/atom.xml" rel="self"/>
  <link href="http://geopet.github.io/"/>
  <updated>2014-12-31T12:37:03-07:00</updated>
  <id>http://geopet.github.io/</id>
  <author>
    <name><![CDATA[Geoff Petrie]]></name>
    <email><![CDATA[g.petrie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Revenge of Ruby Hashes]]></title>
    <link href="http://geopet.github.io/blog/2012/10/02/revenge-of-ruby-hashes/"/>
    <updated>2012-10-02T17:02:00-06:00</updated>
    <id>http://geopet.github.io/blog/2012/10/02/revenge-of-ruby-hashes</id>
    <content type="html"><![CDATA[<p>Because I can&rsquo;t seem to let this go, I continued to research the
challenge I was dealing with a <a href="http://blog.geoffpetrie.com/blog/2012/09/25/the-ruby-hashes-case/">few days back</a>
where I was trying to get the <a href="http://blog.geoffpetrie.com/blog/2012/09/25/python-dictionaries/">cool python trick</a>
to work with Ruby hashes.</p>

<p>After scrubbing the Ruby documentation a more carefully, it seems that
Ruby hashes and Python dictionaries are not entirely identical.  Most
importantly, Ruby hashes don&rsquo;t have the same string methods that Python
dictionaries do. Meaning: Ruby hashes and Python dictionaries, while
similar, may be more of an apples and oranges sort of comparison.</p>

<p>With this in mind, I tried to trim up the code I wrote the last time to
produce the same output. This is what I came up with:</p>

<p><figure class='code'><figcaption><span>The New Semi-Colon Goodness semicolon2.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">server</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">gpetrie</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">database</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">localhost</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">uid</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">sa</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">pwd</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">secret</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;hash.each do |key, val|</span>
</span><span class='line'><span class="sr">  arr &amp;lt;&amp;lt; &amp;ldquo;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="sr">=</span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="sr">&amp;rdquo;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="n">arr</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>What I&rsquo;m doing here is forcing myself to work within the confines of the
initial premiss that the values are given to me in a hash. I convert the
hash to an array and then use the join method on the array to do what I
want to do to get the output that I want. <em>Semi-colon success achieved!</em></p>

<p>I think we can generally agree that this is better than the option I
proposed previously:</p>

<p><figure class='code'><figcaption><span>The Old Semi-Colon Badness semicolon.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">server</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">gpetrie</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">database</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">localhost</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">uid</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">sa</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">pwd</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">secret</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;hash.each do |key, val|</span>
</span><span class='line'><span class="sr">  if hash.length == 1</span>
</span><span class='line'><span class="sr">    print &amp;ldquo;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="sr">=</span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="sr">\n&amp;rdquo;</span>
</span><span class='line'><span class="sr">  else</span>
</span><span class='line'><span class="sr">    print &amp;ldquo;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="sr">=</span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="sr">; &amp;rdquo;</span>
</span><span class='line'><span class="sr">    hash.delete(key)</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>For my money, the new snippet is much more readable and is just a smidge
more compact. A win on all sides.</p>

<p>I probably won&rsquo;t be returning to this subject again in the near term
(unless I find out I&rsquo;m totally wrong here), but expect more Ruby focused
conversation coming up regularly here while I work my way through the
language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ruby Hashes Case]]></title>
    <link href="http://geopet.github.io/blog/2012/09/25/the-ruby-hashes-case/"/>
    <updated>2012-09-25T23:55:00-06:00</updated>
    <id>http://geopet.github.io/blog/2012/09/25/the-ruby-hashes-case</id>
    <content type="html"><![CDATA[<p>Contrary to the date listed, the <a href="http://blog.geoffpetrie.com/blog/2012/09/25/python-dictionaries/">previous post</a> about Python and dictionaries and PHP and associative arrays was written a few weeks back. I&rsquo;ve since been spending more time with Ruby.</p>

<p>After posting that article about how tight the Python code was in order to build a string with just the right number of semicolons, I decided to see if I could do the same thing with Ruby.</p>

<p>This is the solution I came up with:</p>

<pre><code>hash = {"server"=&gt;"gpetrie", "database"=&gt;"localhost", "uid"=&gt;"sa", "pwd"=&gt;"secret"}

hash.each do |key, val|
  if hash.length == 1
    print "#{key}=#{val}\n"
  else
    print "#{key}=#{val}; "
    hash.delete(key)
  end
end
</code></pre>

<p>I think I&rsquo;m missing something here that would make this code much tighter. This looks very similar to the PHP code that I wrote as the solution in my previous article. There&rsquo;s got to be a method that I&rsquo;m not using that would allow me to dismiss the <code>delete</code> and the <code>hash.length</code> that I am using.</p>

<p>If you have thoughts or suggestions, hit me up on <a href="https://twitter.com/geopet">Twitter</a> and let me know.</p>
]]></content>
  </entry>
  
</feed>
