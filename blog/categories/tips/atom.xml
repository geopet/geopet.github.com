<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | Thoughts of Geoff]]></title>
  <link href="http://geopet.github.io/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://geopet.github.io/"/>
  <updated>2014-08-15T23:22:34-06:00</updated>
  <id>http://geopet.github.io/</id>
  <author>
    <name><![CDATA[Geoff Petrie]]></name>
    <email><![CDATA[g.petrie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress: Change the Default Preview Server]]></title>
    <link href="http://geopet.github.io/blog/2012/10/14/octopress-change-the-default-preview-server/"/>
    <updated>2012-10-14T21:27:00-06:00</updated>
    <id>http://geopet.github.io/blog/2012/10/14/octopress-change-the-default-preview-server</id>
    <content type="html"><![CDATA[<p>Another quick tip for people using <a href="http://octopress.org/">Octopress</a>:</p>

<p>If you&rsquo;re running Octopress on Mac OSX you may be running into some real
performance issues when you run the <code>rake preview</code> command to check your
posts locally before you run the <code>rake deploy</code> to get things up and
running live. This is because, for whatever reason, the
<a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/webrick/rdoc/index.html">WEBrick</a> server runs slowly on
XCode 4.2+. I haven&rsquo;t dived deep into finding a solution for this
because I found a nice fix.</p>

<p>First, run <code>gem install thin</code> from your command line.</p>

<p>This command will install the <a href="http://code.macournoyer.com/thin/">Ruby Thin Server</a>. This server is what I use
for my Rails testing as well and it works exactly the way I want it to.
(I have read many recommendations on using <a href="http://pow.cx/">Pow</a> as
well, but I haven&rsquo;t spent the time looking into it so I can&rsquo;t personally
recommend it yet.)</p>

<p>The next step is to change your <code>Gemfile</code> located in the top directory
of your Octopress files.  Simply add <code>gem 'thin'</code> to the development
group and save the changes.</p>

<p>This is what your <code>Gemfile</code> should look like now if you&rsquo;re running
Octopress 2.0 without any changes up to this point:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://rubygems.org&quot;</span><span class="o">&gt;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">rubygems</span><span class="o">.</span><span class="n">org</span><span class="o">&lt;</span><span class="sr">/a&gt;&amp;rdquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rake</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rack</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">jekyll</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">11</span><span class="o">.</span><span class="mi">2</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rdiscount</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">8</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">pygments</span><span class="o">.</span><span class="n">rb</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">12</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">RedCloth</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">9</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">haml</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">6</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">compass</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">12</span><span class="o">.</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rubypants</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rb</span><span class="o">-</span><span class="n">fsevent</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">stringex</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">liquid</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">thin</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;gem &amp;lsquo;sinatra&amp;rsquo;, &amp;lsquo;~&gt; 1.3.2&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The next time you run <code>rake preview</code> your blog on
<a href="http://localhost:4000">http://localhost:4000</a> should run smooth as silk on the Thin server.</p>

<p>Enjoy your sweet, speedy, dev environment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Tips: Tagging]]></title>
    <link href="http://geopet.github.io/blog/2012/10/14/git-tips-tagging/"/>
    <updated>2012-10-14T21:06:00-06:00</updated>
    <id>http://geopet.github.io/blog/2012/10/14/git-tips-tagging</id>
    <content type="html"><![CDATA[<p>File this under the <em>I&rsquo;m always referencing this, so I&rsquo;m going to do a
quick post about it</em> category.</p>

<p>Tagging in Git is super powerful and can save your butt. Here are a few
commands that I use often but never seem to remember.</p>

<p><strong>List</strong> all your tags:</p>

<p><code>git tag</code></p>

<hr />

<p><strong>Create</strong> a tag:</p>

<p><code>git tag -a v1.4</code></p>

<hr />

<p><strong>Push</strong> tags:</p>

<p><code>git push origin v1.4</code></p>

<p>or</p>

<p><code>git push origin --tags</code></p>

<hr />

<p><strong>Checkout</strong> a tag:</p>

<p><code>git checkout -b v1.4</code></p>

<hr />

<p><strong>Deleting</strong> a tag</p>

<p><code>git tag -d v1.4</code></p>

<hr />

<p><strong>Deleting</strong> a <em>remote</em> tag</p>

<p><code>git push origin :v1.4</code></p>

<hr />

<p><strong>Search</strong> for <em>specific</em> tags:</p>

<p><code>git tag -l 'v1.0.2'</code></p>

<hr />

<p><strong>See</strong> tag <em>data</em>:</p>

<p><code>git show v1.4</code></p>

<hr />

<p><strong>Retroactively</strong> tag:</p>

<p><code>git tag -a v1.4 &lt;&lt;checksum&gt;&gt;</code></p>

<hr />

<p>A couple of nice references on tagging:</p>

<p><a href="http://git-scm.com/book/en/Git-Basics-Tagging">Git Basics - Tagging</a><br/>
<a href="http://gitready.com/beginner/2009/02/03/tagging.html">Git Ready - Tagging</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Tip: Use Prune to Update Local Repo Branches]]></title>
    <link href="http://geopet.github.io/blog/2012/09/04/some-quick-git-tips/"/>
    <updated>2012-09-04T21:46:00-06:00</updated>
    <id>http://geopet.github.io/blog/2012/09/04/some-quick-git-tips</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/git-prune.jpg" title="[pruning the stale branches]" ></p>

<p>I have multiple places where I work and I use <a href="http://git-scm.com/">Git</a> to support that. The general Git workflow I&rsquo;ve adopted is similar to the one <a href="http://scottchacon.com/2011/08/31/github-flow.html">Scott Chacon describes</a>.</p>

<p>In Scott&rsquo;s post he explains that anything in <code>master</code> is deployable, and any time you want to work on something you branch from <code>master</code> with something descriptively named. This is what I want to talk about now.</p>

<p>I use this process of branching to keep my changes manageable. By naming my branches descriptively I know that if I&rsquo;m building a new user profiling tool, and changing the css of a navigational piece and updating a SQL query in the same branch, then the commit isn&rsquo;t going to be terribly clean. Plus, now the branch has no meaning to me when I get feedback from a tester. This branch would make even less sense if I had someone else coding with me.</p>

<p>To keep branches meaningful I make a lot of branches off of <code>master</code>. I&rsquo;ve come to the standard practice of pushing pretty much <em>any</em> branch I&rsquo;m working on, no matter how minor, to the remote. This makes it simple to <code>fetch</code> and <code>merge</code> on my dev server instance instead of scp&#8217;ing the work I&rsquo;ve done to the server. The process is just feels a little crisper.</p>

<p>After the testers have given the thumbs up on the work and I do my final code review, I merge the branch to master, push it out to production and delete that feature/bugfix branch. All-in-all it is a generally good system.</p>

<p>But what inevitably happens is the dev server has a bunch of branches that are no longer useful and don&rsquo;t have a remote counterpart to them. It gets to be a bit of a mess when you run <code>git branch</code> and see a dozen old branches sitting there.</p>

<p>To fix this issue I found a great, quick command:</p>

<p><code>git remote prune origin</code></p>

<p>Where <code>origin</code> is the name of the remote.</p>

<p><a href="http://www.kernel.org/pub/software/scm/git/docs/git-remote.html">From the manual</a>:</p>

<blockquote><p><strong>prune</strong></p>

<p><code>git remote prune [-n | --dry-run] &lt;name&gt;</code></p>

<p>Deletes all stale remote-tracking branches under <code>&lt;name&gt;</code>. These stale branches have already been removed from the remote repository referenced by <code>&lt;name&gt;</code>, but are still locally available in <code>"remotes/&lt;name&gt;"</code>.</p>

<p>With <code>--dry-run</code> option, report what branches will be pruned, but do not actually prune them.</p></blockquote>

<p><code>prune</code> is one of those commands that you may not use very often, but it is nice to know it&rsquo;s there when you need it.</p>

<hr />

<p><strong>Endnote:</strong></p>

<p>I found this particular <a href="http://stackoverflow.com/a/3994587/887078">Stack Overflow</a> answer useful when I was looking for information on how to handle dead remote branches.</p>

<p><em>Image &ldquo;Four volunteers prune some plants that were growing over the trail.&rdquo; from <a href="http://www.flickr.com/photos/presidiosf/6209563606/">United States Government Work</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Great Tip on Apple IDs]]></title>
    <link href="http://geopet.github.io/blog/2011/10/12/great-tip-on-apple-ids/"/>
    <updated>2011-10-12T12:48:00-06:00</updated>
    <id>http://geopet.github.io/blog/2011/10/12/great-tip-on-apple-ids</id>
    <content type="html"><![CDATA[<blockquote><p>But what if I share my Apple ID?</p>

<p>If you use your Apple ID on multiple devices to buy apps (say, if you have one central account for your, your spouse’s, and your children’s purchases), it’s best not to convert it into an iCloud account. Although your installed iCloud account is, by default, the one you’ll use to purchase music and apps with, you can still manually sign in and out of the App and iTunes Stores on your device. Instead, you should create an entirely separate account to use with iCloud.</p></blockquote>

<p>Awesome tip from Macworld&rsquo;s <a href="http://www.macworld.com/article/162963/2011/10/meet_icloud_apples_new_sync_service.html">Getting started with iCloud, Apple&rsquo;s new sync service</a> article.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Service Using Automator for nvALT Notes Version Control]]></title>
    <link href="http://geopet.github.io/blog/2011/09/21/creating-a-service-using-automator-for-nvalt-notes-version-control/"/>
    <updated>2011-09-21T08:00:00-06:00</updated>
    <id>http://geopet.github.io/blog/2011/09/21/creating-a-service-using-automator-for-nvalt-notes-version-control</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>I&rsquo;m going to get a pretty nerdy here for a moment.</p>

<p>So I dove in and I&rsquo;m now using
<a href="http://brettterpstra.com/project/nvalt/">nvALT</a>,
<a href="http://www.secondgearsoftware.com/elements/">Elements</a> and
<a href="http://git-scm.com/">Git</a> for my note taking needs. Aside from a few
minor hiccups, which I&rsquo;ll address in a later post, this is really
working nicely.</p>

<p>The one thing that I needed when I added nvALT and Elements to my note
taking workflow was the ability to easily continue version control with
Git. Before taking on this new process I was using Git in my notes
directory and I wasn&rsquo;t about to lose that option now.</p>

<p>But the ease which nvALT allows me to create new text files, and with
nvALT built to work better with <a href="http://brettterpstra.com/break-up-your-text-documents/">smaller
files</a>, I need
some way to get my version control under control.<a href="#fn:1"
id="fnref:1" title="see footnote" class="footnote">[1]</a></p>

<p>Here&rsquo;s what my workflow was:</p>

<ol>
<li>Work, notes, work, notes.</li>
<li>Work, notes, work, notes.</li>
<li>Look at the time.</li>
<li><em>Damn! How long has it been since I last did a commit?</em></li>
<li>cd to my notes directory.</li>
<li>Commit my notes to my repository.</li>
</ol>


<p>It wasn&rsquo;t really precision based. Plus it had the added detriment of
taking me out of what I was doing to commit my notes.</p>

<p>What I did<a href="#fn:2" id="fnref:2" title="see footnote" class="footnote">[2]</a> was create a Bash script and then used Automator to create a
Service for it that I also applied a keyboard shortcut to.</p>

<p>If you&rsquo;re still with me, here&rsquo;s how I did it:</p>

<h2>The Reveal</h2>

<p>First<a href="#fn:3" id="fnref:3" title="see footnote" class="footnote">[3]</a>, create your Bash script.</p>

<p>I keep all my notes in one directory. This is the way that nvALT and, it
seems, Elements like to work. With some light taxonomy (ala <a href="http://macpowerusers.com/2011/03/mpu-046-workflows-with-merlin-mann-ii/">Merlin Mann
and Mac Power
Users</a>)
I have a reasonably good system in place. All my notes are in a
<a href="http://db.tt/eOrvceA">Dropbox</a> subdirectory called &ldquo;notes.&rdquo;</p>

<p>To get this to work I created a Bash script named <code>git_notes.sh</code> and put
this in it:</p>

<pre><code>#!/bin/bash

cd /Users/username/Dropbox/notes/
git add .
git commit -m 'nvALT Service Commit'
echo "* "`date`" nvALT Commit" &gt;&gt; /Users/username/Dropbox/notes/noteCommits`date "+%Y%m%d"`.md
</code></pre>

<p>Now, you&rsquo;ll see that this is redundant and probably a lot silly, but
this is what it does.</p>

<ol>
<li>It makes sure that we&#8217;r in my notes directory using the absolute pathname.</li>
<li>It stages only the modified files to the repository.<a href="#fn:4" id="fnref:4" title="see footnote" class="footnote">[4]</a></li>
<li>It commits those changes and uses a standard message for my Git
log file.</li>
<li>The last line is where it gets a little silly, it appends to another
file in the same Dropbox subdirectory with a message that also gives a
human readable date/time. Why am I doing this? I don&rsquo;t know, maybe
someday I&rsquo;ll set up something to parse it to get some analytics of when
I do most of my commits for my notes file.</li>
</ol>


<p>But now that we have our Bash script. The rest is <em>trivial</em>.</p>

<p>First, we open <a href="http://support.apple.com/kb/ht2488">Automator</a> and
select &ldquo;Service&rdquo; as our document type under the &ldquo;Choose a type for your
document:&rdquo;</p>

<p><img class="center" src="/images/creating-a-service-01.png"></p>

<p>Next, we&rsquo;re going to change the &ldquo;Service receives&rdquo; from the default
&ldquo;text&rdquo; to &ldquo;no input&rdquo;. Leave the &ldquo;in&rdquo; &ldquo;any application&rdquo; as it is.</p>

<p><img class="center" src="/images/creating-a-service-02.png"></p>

<p>Penultimately, we click &ldquo;Utilities&rdquo; under the left-side &ldquo;Library&rdquo; dropdown and
then drag the &ldquo;Run Shell Script&rdquo; from the middle column over to the
right side.</p>

<p><img class="center" src="/images/creating-a-service-03.png"></p>

<p>Lastly, we enter in the location of the script in the workflow. It&rsquo;s a
good idea to use the absolute pathname here. In my case it was
<code>/Users/username/Dropbox/notes/git_notes.sh</code>.</p>

<p>Once you save you&rsquo;ll have a Service that will be available from any
of your application menus. Click on the Service and it will do a Git
commit of all the changes to that notes directory as well as update the
faux log file we&rsquo;ve created for the day.</p>

<p><img class="center" src="/images/creating-a-service-04.png"></p>

<p>But I don&rsquo;t like to use the mouse/trackpad that much. So the final touch
to this is to create a keyboard shortcut in your System Preferences. Go
to <code>Applications &gt; System Preferences &gt; Keyboard</code>. Then choose &ldquo;Keyboard
Shortcuts&rdquo; and select &ldquo;Services&rdquo; from the left side. Your new Service
should be at the end of the Services listings. Just click the blank
space at the far end of the window and you should get a text input
field. You can use anything you want for your shortcut, but I chose
control-option-command-shift-s for mine to avoid any chance of a
keyboard conflict.</p>

<p><img class="center" src="/images/creating-a-service-05.png"></p>

<h2>Conclusion</h2>

<p>So there you have it. A quick and dirty way to make sure that the notes
you&rsquo;re producing will be version controlled through Git. As a final
remark, I&rsquo;ll say that having version control has already paid off for
me.</p>

<p>I use multiple computers and I made the <em>huge</em> mistake of accidentally
deleting a bunch of files when a prompt popped up and I didn&rsquo;t read
exactly what it said. All of a sudden 20-some-odd notes of mine were
<em>gone</em>. But version control to the rescue! I <em>knew</em> I had just committed
to my repo before I had deleted the files and I was able to pull them
back from brink of deletion hell. But this was even easier than it could
have been because I had been using <code>git add .</code> instead of <code>git add -a</code>.
All it meant was that I needed to unstage the deleted files. It was
great and a perfect reason why doing something like this makes sense.</p>

<h2>Post Script</h2>

<p>I should add that the use of a common/standard commit message is bad
practice. The reason I do this, instead of throwing a prompt so that I
can enter in a more detailed message, is that this is supposed to create
a workflow that won&rsquo;t interrupt what you&rsquo;re in the middle of but give
you the peace of mind that you&rsquo;ve got things in a version controlled
environment. This <em>does not</em> prevent you from going to your notes
directory and doing a proper Git commit with a detailed message on what
you&rsquo;ve done since your last commit. In fact, at the end of this
paragraph I&rsquo;ll be committing properly to say that this draft is
finished. And when I finish my review of the draft I&rsquo;ll commit again,
and message that it is ready for posting. After that, I&rsquo;ll probably do a
name change to the file (this is the taxonomy thing I mentioned before)
and then do another <em>proper</em> commit.</p>

<p>One last point: You may have noticed that you can easily change the Bash
script to point to any directory you want. Once you have the Service in
place, you can edit your <code>.sh</code> file whenever you please and have a
temporary keyboard shortcut for Git repo commits. I think that&rsquo;s kinda
cool.</p>

<div class="footnotes">
<hr />
<ol>

<li id="fn:1">
<p>For example, I have already committed this post three times. <a href="#fnref:1" title="return to article" class="reversefootnote">&#160;&#8617;</a></p>
</li>

<li id="fn:2">
<p>My solution was to produce a quick and dirty Bash script
and then have it run through <a href="http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/launchctl.1.html">launchctl</a> on a regular basis. <a href="#fnref:2" title="return to article" class="reversefootnote">&#160;&#8617;</a></p>
</li>

<li id="fn:3">
<p>This tutorial assumes you have a local Git repo in place.
If you don&#8217;t have one and want to learn how, you can check out my
<a href="http://faceofgeoff.com/post/5383300462/learning-git">post</a> on the subject of Git. <a href="#fnref:3" title="return to article" class="reversefootnote">&#160;&#8617;</a></p>
</li>

<li id="fn:4">
<p>This is a key point because what I am <em>not</em> doing is
staging any files for <em>deletion</em> only modification. This means I won&#8217;t
worry about any files going away without my knowing. <a href="#fnref:4" title="return to article" class="reversefootnote">&#160;&#8617;</a></p>
</li>

</ol>
</div>


<p><em>I originally posted this tutorial on my Tumblr: <a href="http://faceofgeoff.com/post/10480335918/creating-a-service-using-automator-for-nvalt-notes">The Face of Geoff</a></em></p>
]]></content>
  </entry>
  
</feed>
