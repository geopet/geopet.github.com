<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Thoughts of Geoff]]></title>
  <link href="http://geopet.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://geopet.github.io/"/>
  <updated>2014-12-31T12:37:03-07:00</updated>
  <id>http://geopet.github.io/</id>
  <author>
    <name><![CDATA[Geoff Petrie]]></name>
    <email><![CDATA[g.petrie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixing a Slow Localhost Webrick Server]]></title>
    <link href="http://geopet.github.io/blog/2013/01/30/fixing-a-slow-localhost-webrick-server/"/>
    <updated>2013-01-30T23:16:00-07:00</updated>
    <id>http://geopet.github.io/blog/2013/01/30/fixing-a-slow-localhost-webrick-server</id>
    <content type="html"><![CDATA[<p>For the longest time I could not get Webrick to work for me. It would boot up with <code>rails s</code> but would take several seconds for even the default landing page of a rails app to load. It was terrible.</p>

<p>I resorted to using <a href="http://code.macournoyer.com/thin/">Thin</a> as my default browser by making sure it was in all my Gem files, but I still wanted to figure out why Webrick simply wouldn&rsquo;t work for me. (Truth is, Thin is a better web server, but I still wanted to get Webrick to work for me.)</p>

<p>Searching for &ldquo;webrick slow&rdquo; brought up a possible solution via <a href="http://stackoverflow.com/a/3465134/887078">Stack Overflow</a>. Basically you change the <code>:DoNotReverseLookup</code> symbol in your global Webrick config from <code>nil</code> to <code>true</code>.</p>

<p>If you&rsquo;re on OS X Lion you&rsquo;ll find the Webrick configuration here:</p>

<p><code>~/.rvm/rubies/ruby-1.9.3-p362/lib/ruby/1.9.1/webrick/config.rb</code></p>

<p>I found the <code>:DoNotReverseLookup</code> configuration on line 36.</p>

<p>Once I made the change Webrick was screaming fast. I&rsquo;m pretty happy about it.</p>

<p>I still haven&rsquo;t found the definitive reason why this problem is occurring, but at least this change appears to fix things for me.</p>

<hr />

<p>Please note, depending on the version of Ruby you&rsquo;re running <code>ruby-1.9.3-p362</code> could be something different. Just as long as you&rsquo;re changing the <code>confg.rb</code> file in the <code>webrick/</code> directory, you should be fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Thoughts on Ego]]></title>
    <link href="http://geopet.github.io/blog/2013/01/18/thoughts-on-ego/"/>
    <updated>2013-01-18T10:36:00-07:00</updated>
    <id>http://geopet.github.io/blog/2013/01/18/thoughts-on-ego</id>
    <content type="html"><![CDATA[<p>To categorically define <em>Ego</em> is out of the scope of this writing. In order to make things easier on myself, and hopefully you, I will attempt to elucidate my meaning through example. But so that we&rsquo;re all starting on the same foot, when I say ego I am referring to the informal and negative connotation of the word.</p>

<p>Why am I talking about ego?</p>

<p>For months now I have been trying to write about my journey as a newbie in the Ruby programming language. I have more than half a dozen starts to what should be a simple short piece of writing. All I wanted to do was provide some preamble so that I could then post the video I used as an entry into the <a href="http://rubyrogues.com/ruby-nuby-project/">Ruby Nuby</a> contest that the <a href="http://rubyrogues.com/">Ruby Rogues</a> podcast put together in October of last year. For some reason every time I attempted to write this article it came out feeling wrong. I&rsquo;m going to try a different take on this subject now.</p>

<p>Several months ago I decided that I needed to broaden my professional horizons. I had been singularly focused on a few programming languages for far too long. I knew I needed to break out of that sedentary place and that there was a fundamental element I was missing. The problem: I didn&rsquo;t know what that element was.</p>

<p>Now I say that several months ago I decided to do something, but the reality is that I have known for years that I could be doing more. <em>This</em> is where ego comes into play.</p>

<p>Ego may be the <em>single biggest impediment to improvement</em>.</p>

<p>Ego prevents us from asking questions. It prevents us from seeking out help. It stops us from acting in an empathetic way. Ego encourages us to be know-it-alls.</p>

<p>The astounding thing about ego is how difficult it is to counteract it. If you call someone out on their ego, what is driving that? There is likely a healthy dose of ego fueling the accusation that someone is filled with hubris. &ldquo;This person is interfering with my greatness, I need to tell them to drop their ego!&rdquo; At least that&rsquo;s what I&rsquo;ve tended to hear when someone has talked about another&rsquo;s ego with me.</p>

<p>But for me, I believe ego has significantly impaired my ability to level up or move forward. I never wanted to accept that I was the least informed, or educated, person in the room. Often times I was being paid to be the most knowledgable person only to realize that I was maybe just slightly more experienced in the subject. Often I was either on even footing or worse! In these situations it wasn&rsquo;t unusual if I found personal security in grabbing my ego tight and running with it. An opportunity for learning? I think not! I would have been more comfortable either attempting to look contemplative, while really just being confused, or, even worse, I would have attempted to derail conversations to a place where I was more familiar.</p>

<p>Was this always the case for me? No. Of course not. But in hindsight it happen more than it should have.</p>

<p>So why am I writing about this?</p>

<p>Ultimately breaking the ego chain was what I needed to write about when I have been trying to talk about starting fresh with Ruby. Yes, embracing newbiness requires a dismissal of ego. But the direction doesn&rsquo;t go newbie to ego. It is the other way around! <em>Ego must go before</em> you can consider being a newbie of anything.</p>

<p>I wish I could say that dumping your ego was easy and that it felt good. Sometimes it does. It certainly depends on the people around you. Having a supportive group does make things simpler.</p>

<p>As a programmer it is tough to dismiss the ego outright. We pride ourselves on reviewing someone&rsquo;s code and finding a bug, or figuring out a more elegant way to write the same method or class. Our ego is what drives us to solve problems! If I didn&rsquo;t think I couldn&rsquo;t do something I hadn&rsquo;t done before I would never have made it in this profession at all. This is a time that ego is a benefit. Ego that pushes us, that drives us to become more than we are, that&rsquo;s something we can embrace. Looking at it in this sense, it isn&rsquo;t incorrect to say that ego is what is driving me to dismiss my ego now. How odd!</p>

<p>So in an effort to move past my typical embarrassment of asking questions that clearly show I don&rsquo;t understand a subject with any sort of depth, or to try something, with varying degrees of success, just so that I can work on that particular skill, I am making a concerted effort to dismiss my ego. I made the video I&rsquo;m embedding below with this in mind as well.</p>

<p>I want to continue to live a fulfilling life. In order for me to do that I need to know that I won&rsquo;t allow something as insignificant as my ego get in the way of asking a question that could lead to a path of new experiences.</p>

<p>At the end of the day this is all about being a happier person.</p>

<p>Thanks for reading.</p>

<p>And here&rsquo;s the video that I&rsquo;ve been wanting to post here for months:</p>

<!-- more -->




<iframe width="420" height="315" src="http://www.youtube.com/embed/8enQ96-xOOw?rel=0" frameborder="0" allowfullscreen></iframe>


<p>As a side note, I&rsquo;ll be a guest on the Ruby Rogues next week and the show will air probably at the end of the month.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Change the Default Preview Server]]></title>
    <link href="http://geopet.github.io/blog/2012/10/14/octopress-change-the-default-preview-server/"/>
    <updated>2012-10-14T21:27:00-06:00</updated>
    <id>http://geopet.github.io/blog/2012/10/14/octopress-change-the-default-preview-server</id>
    <content type="html"><![CDATA[<p>Another quick tip for people using <a href="http://octopress.org/">Octopress</a>:</p>

<p>If you&rsquo;re running Octopress on Mac OSX you may be running into some real
performance issues when you run the <code>rake preview</code> command to check your
posts locally before you run the <code>rake deploy</code> to get things up and
running live. This is because, for whatever reason, the
<a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/webrick/rdoc/index.html">WEBrick</a> server runs slowly on
XCode 4.2+. I haven&rsquo;t dived deep into finding a solution for this
because I found a nice fix.</p>

<p>First, run <code>gem install thin</code> from your command line.</p>

<p>This command will install the <a href="http://code.macournoyer.com/thin/">Ruby Thin Server</a>. This server is what I use
for my Rails testing as well and it works exactly the way I want it to.
(I have read many recommendations on using <a href="http://pow.cx/">Pow</a> as
well, but I haven&rsquo;t spent the time looking into it so I can&rsquo;t personally
recommend it yet.)</p>

<p>The next step is to change your <code>Gemfile</code> located in the top directory
of your Octopress files.  Simply add <code>gem 'thin'</code> to the development
group and save the changes.</p>

<p>This is what your <code>Gemfile</code> should look like now if you&rsquo;re running
Octopress 2.0 without any changes up to this point:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://rubygems.org&quot;</span><span class="o">&gt;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">rubygems</span><span class="o">.</span><span class="n">org</span><span class="o">&lt;</span><span class="sr">/a&gt;&amp;rdquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rake</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rack</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">jekyll</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">11</span><span class="o">.</span><span class="mi">2</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rdiscount</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">8</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">pygments</span><span class="o">.</span><span class="n">rb</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">12</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">RedCloth</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">9</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">haml</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">6</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">compass</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">12</span><span class="o">.</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rubypants</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">rb</span><span class="o">-</span><span class="n">fsevent</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">stringex</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">liquid</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">thin</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;gem &amp;lsquo;sinatra&amp;rsquo;, &amp;lsquo;~&gt; 1.3.2&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The next time you run <code>rake preview</code> your blog on
<a href="http://localhost:4000">http://localhost:4000</a> should run smooth as silk on the Thin server.</p>

<p>Enjoy your sweet, speedy, dev environment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revenge of Ruby Hashes]]></title>
    <link href="http://geopet.github.io/blog/2012/10/02/revenge-of-ruby-hashes/"/>
    <updated>2012-10-02T17:02:00-06:00</updated>
    <id>http://geopet.github.io/blog/2012/10/02/revenge-of-ruby-hashes</id>
    <content type="html"><![CDATA[<p>Because I can&rsquo;t seem to let this go, I continued to research the
challenge I was dealing with a <a href="http://blog.geoffpetrie.com/blog/2012/09/25/the-ruby-hashes-case/">few days back</a>
where I was trying to get the <a href="http://blog.geoffpetrie.com/blog/2012/09/25/python-dictionaries/">cool python trick</a>
to work with Ruby hashes.</p>

<p>After scrubbing the Ruby documentation a more carefully, it seems that
Ruby hashes and Python dictionaries are not entirely identical.  Most
importantly, Ruby hashes don&rsquo;t have the same string methods that Python
dictionaries do. Meaning: Ruby hashes and Python dictionaries, while
similar, may be more of an apples and oranges sort of comparison.</p>

<p>With this in mind, I tried to trim up the code I wrote the last time to
produce the same output. This is what I came up with:</p>

<p><figure class='code'><figcaption><span>The New Semi-Colon Goodness semicolon2.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">server</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">gpetrie</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">database</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">localhost</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">uid</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">sa</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">pwd</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">secret</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;hash.each do |key, val|</span>
</span><span class='line'><span class="sr">  arr &amp;lt;&amp;lt; &amp;ldquo;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="sr">=</span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="sr">&amp;rdquo;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="n">arr</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>What I&rsquo;m doing here is forcing myself to work within the confines of the
initial premiss that the values are given to me in a hash. I convert the
hash to an array and then use the join method on the array to do what I
want to do to get the output that I want. <em>Semi-colon success achieved!</em></p>

<p>I think we can generally agree that this is better than the option I
proposed previously:</p>

<p><figure class='code'><figcaption><span>The Old Semi-Colon Badness semicolon.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">server</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">gpetrie</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">database</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">localhost</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">uid</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">sa</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">pwd</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">secret</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;hash.each do |key, val|</span>
</span><span class='line'><span class="sr">  if hash.length == 1</span>
</span><span class='line'><span class="sr">    print &amp;ldquo;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="sr">=</span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="sr">\n&amp;rdquo;</span>
</span><span class='line'><span class="sr">  else</span>
</span><span class='line'><span class="sr">    print &amp;ldquo;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="sr">=</span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="sr">; &amp;rdquo;</span>
</span><span class='line'><span class="sr">    hash.delete(key)</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>For my money, the new snippet is much more readable and is just a smidge
more compact. A win on all sides.</p>

<p>I probably won&rsquo;t be returning to this subject again in the near term
(unless I find out I&rsquo;m totally wrong here), but expect more Ruby focused
conversation coming up regularly here while I work my way through the
language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ruby Hashes Case]]></title>
    <link href="http://geopet.github.io/blog/2012/09/25/the-ruby-hashes-case/"/>
    <updated>2012-09-25T23:55:00-06:00</updated>
    <id>http://geopet.github.io/blog/2012/09/25/the-ruby-hashes-case</id>
    <content type="html"><![CDATA[<p>Contrary to the date listed, the <a href="http://blog.geoffpetrie.com/blog/2012/09/25/python-dictionaries/">previous post</a> about Python and dictionaries and PHP and associative arrays was written a few weeks back. I&rsquo;ve since been spending more time with Ruby.</p>

<p>After posting that article about how tight the Python code was in order to build a string with just the right number of semicolons, I decided to see if I could do the same thing with Ruby.</p>

<p>This is the solution I came up with:</p>

<pre><code>hash = {"server"=&gt;"gpetrie", "database"=&gt;"localhost", "uid"=&gt;"sa", "pwd"=&gt;"secret"}

hash.each do |key, val|
  if hash.length == 1
    print "#{key}=#{val}\n"
  else
    print "#{key}=#{val}; "
    hash.delete(key)
  end
end
</code></pre>

<p>I think I&rsquo;m missing something here that would make this code much tighter. This looks very similar to the PHP code that I wrote as the solution in my previous article. There&rsquo;s got to be a method that I&rsquo;m not using that would allow me to dismiss the <code>delete</code> and the <code>hash.length</code> that I am using.</p>

<p>If you have thoughts or suggestions, hit me up on <a href="https://twitter.com/geopet">Twitter</a> and let me know.</p>
]]></content>
  </entry>
  
</feed>
