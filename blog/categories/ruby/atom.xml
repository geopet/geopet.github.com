<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Thoughts of Geoff]]></title>
  <link href="http://geopet.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://geopet.github.com/"/>
  <updated>2012-10-14T21:50:09-06:00</updated>
  <id>http://geopet.github.com/</id>
  <author>
    <name><![CDATA[Geoff Petrie]]></name>
    <email><![CDATA[g.petrie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress: Change the Default Preview Server]]></title>
    <link href="http://geopet.github.com/blog/2012/10/14/octopress-change-the-default-preview-server/"/>
    <updated>2012-10-14T21:27:00-06:00</updated>
    <id>http://geopet.github.com/blog/2012/10/14/octopress-change-the-default-preview-server</id>
    <content type="html"><![CDATA[<p>Another quick tip for people using <a href="http://octopress.org/">Octopress</a>:</p>

<p>If you're running Octopress on Mac OSX you may be running into some real
performance issues when you run the <code>rake preview</code> command to check your
posts locally before you run the <code>rake deploy</code> to get things up and
running live. This is because, for whatever reason, the
<a href="http://en.wikipedia.org/wiki/WEBrick">Webrick</a> server runs slowly on
XCode 4.2+. I haven't dived deep into finding a solution for this
because I found a nice fix.</p>

<p>First, run <code>gem install thin</code> from your command line.</p>

<p>This command will install the <a href="http://code.macournoyer.com/thin/">Ruby Thin Server</a>. This server is what I use
for my Rails testing as well and it works exactly the way I want it to.
(I have read many recommendations on using <a href="http://pow.cx/">Pow</a> as
well, but I haven't spent the time looking into it so I can't personally
recommend it yet.)</p>

<p>The next step is to change your <code>Gemfile</code> located in the top directory
of your Octopress files.  Simply add <code>gem 'thin'</code> to the development
group and save the changes.</p>

<p>This is what your <code>Gemfile</code> should look like now if you're running
Octopress 2.0 without any changes up to this point:</p>

<p>{% codeblock lang:ruby %}
source "http://rubygems.org"</p>

<p>group :development do
  gem 'rake', '~> 0.9.2'
  gem 'rack', '~> 1.4.1'
  gem 'jekyll', '~> 0.11.2'
  gem 'rdiscount', '~> 1.6.8'
  gem 'pygments.rb', '~> 0.2.12'
  gem 'RedCloth', '~> 4.2.9'
  gem 'haml', '~> 3.1.6'
  gem 'compass', '~> 0.12.1'
  gem 'rubypants', '~> 0.2.0'
  gem 'rb-fsevent', '~> 0.9'
  gem 'stringex', '~> 1.4.0'
  gem 'liquid', '~> 2.3.0'
  gem 'thin'
end</p>

<p>gem 'sinatra', '~> 1.3.2'
{% endcodeblock %}</p>

<p>The next time you run <code>rake preview</code> your blog on
<a href="http://localhost:4000">http://localhost:4000</a> should run smooth as silk on the Thin server.</p>

<p>Enjoy your sweet, speedy, dev environment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revenge of Ruby Hashes]]></title>
    <link href="http://geopet.github.com/blog/2012/10/02/revenge-of-ruby-hashes/"/>
    <updated>2012-10-02T17:02:00-06:00</updated>
    <id>http://geopet.github.com/blog/2012/10/02/revenge-of-ruby-hashes</id>
    <content type="html"><![CDATA[<p>Because I can't seem to let this go, I continued to research the
challenge I was dealing with a <a href="http://blog.geoffpetrie.com/blog/2012/09/25/the-ruby-hashes-case/">few days back</a>
where I was trying to get the <a href="http://blog.geoffpetrie.com/blog/2012/09/25/python-dictionaries/">cool python trick</a>
to work with Ruby hashes.</p>

<p>After scrubbing the Ruby documentation a more carefully, it seems that
Ruby hashes and Python dictionaries are not entirely identical.  Most
importantly, Ruby hashes don't have the same string methods that Python
dictionaries do. Meaning: Ruby hashes and Python dictionaries, while
similar, may be more of an apples and oranges sort of comparison.</p>

<p>With this in mind, I tried to trim up the code I wrote the last time to
produce the same output. This is what I came up with:</p>

<p>{% codeblock The New Semi-Colon Goodness semicolon2.rb %}
hash = {"server"=>"gpetrie", "database"=>"localhost", "uid"=>"sa", "pwd"=>"secret"}
arr = Array.new</p>

<p>hash.each do |key, val|
  arr &lt;&lt; "#{key}=#{val}"
end</p>

<p>puts arr.join("; ")
{% endcodeblock %}</p>

<p>What I'm doing here is forcing myself to work within the confines of the
initial premiss that the values are given to me in a hash. I convert the
hash to an array and then use the join method on the array to do what I
want to do to get the output that I want. <em>Semi-colon success achieved!</em></p>

<p>I think we can generally agree that this is better than the option I
proposed previously:</p>

<p>{% codeblock The Old Semi-Colon Badness semicolon.rb %}
hash = {"server"=>"gpetrie", "database"=>"localhost", "uid"=>"sa", "pwd"=>"secret"}</p>

<p>hash.each do |key, val|
  if hash.length == 1</p>

<pre><code>print "#{key}=#{val}\n"
</code></pre>

<p>  else</p>

<pre><code>print "#{key}=#{val}; "
hash.delete(key)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>For my money, the new snippet is much more readable and is just a smidge
more compact. A win on all sides.</p>

<p>I probably won't be returning to this subject again in the near term
(unless I find out I'm totally wrong here), but expect more Ruby focused
conversation coming up regularly here while I work my way through the
language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ruby Hashes Case]]></title>
    <link href="http://geopet.github.com/blog/2012/09/25/the-ruby-hashes-case/"/>
    <updated>2012-09-25T23:55:00-06:00</updated>
    <id>http://geopet.github.com/blog/2012/09/25/the-ruby-hashes-case</id>
    <content type="html"><![CDATA[<p>Contrary to the date listed, the <a href="http://blog.geoffpetrie.com/blog/2012/09/25/python-dictionaries/">previous post</a> about Python and dictionaries and PHP and associative arrays was written a few weeks back. I've since been spending more time with Ruby.</p>

<p>After posting that article about how tight the Python code was in order to build a string with just the right number of semicolons, I decided to see if I could do the same thing with Ruby.</p>

<p>This is the solution I came up with:</p>

<pre><code>hash = {"server"=&gt;"gpetrie", "database"=&gt;"localhost", "uid"=&gt;"sa", "pwd"=&gt;"secret"}

hash.each do |key, val|
  if hash.length == 1
    print "#{key}=#{val}\n"
  else
    print "#{key}=#{val}; "
    hash.delete(key)
  end
end
</code></pre>

<p>I think I'm missing something here that would make this code much tighter. This looks very similar to the PHP code that I wrote as the solution in my previous article. There's got to be a method that I'm not using that would allow me to dismiss the <code>delete</code> and the <code>hash.length</code> that I am using.</p>

<p>If you have thoughts or suggestions, hit me up on <a href="https://twitter.com/geopet">Twitter</a> and let me know.</p>
]]></content>
  </entry>
  
</feed>
