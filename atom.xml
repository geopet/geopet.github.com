<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thoughts of Geoff]]></title>
  <link href="http://geopet.github.com/atom.xml" rel="self"/>
  <link href="http://geopet.github.com/"/>
  <updated>2012-08-27T21:35:21-06:00</updated>
  <id>http://geopet.github.com/</id>
  <author>
    <name><![CDATA[Geoff Petrie]]></name>
    <email><![CDATA[g.petrie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding a CNAME to your Octopress Blog]]></title>
    <link href="http://geopet.github.com/blog/2012/08/22/adding-a-cname-to-your-octopress-blog/"/>
    <updated>2012-08-22T16:42:00-06:00</updated>
    <id>http://geopet.github.com/blog/2012/08/22/adding-a-cname-to-your-octopress-blog</id>
    <content type="html"><![CDATA[<p>This option isn&#8217;t terribly well explained in the <a href="http://octopress.org/docs/deploying/github/">Octopress documentation</a>, and slightly confusing within the <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Github</a>.</p>

<p>So that I could get <em>blog.geoffpetrie.com</em> to work as my url to my Octopress blog hosted by Github at <em>geopet.github.com</em>, I needed to go to my current hosting service. In my case this is currently <a href="http://www.dreamhost.com/r.cgi?1197623">Dreamhost</a>.</p>

<p>Since I wasn&#8217;t changing my top-level domain (TLD), I wanted to keep <em>geoffpetrie.com</em> pointed at my hosting service, I wanted to add a subdomain, i.e., <em>blog</em> to my domain name server (DNS) run by Dreamhost.</p>

<p>I went into the DNS configuration in the Dreamhost cpanel and added <em>blog</em> as the <strong>name/record</strong>, <em>CNAME</em> as the <strong>type</strong> and <em>geopet.github.com</em> as the <strong>value</strong>.</p>

<p>This is the first step, and once the DNS is refreshed your new subdomain (in my case <em>blog.geoffpetrie.com</em>) will start pointing to a Github 404.</p>

<p>The next step is to add the CNAME to your Octopress <em>master</em> branch. This is surprisingly simple, but not completely intuitive. In the top level of the <em>source</em> branch, you want to use the command:</p>

<p><code>echo 'blog.geoffpetrie.com' &gt;&gt; source/CNAME</code></p>

<p>Of course you&#8217;re going to use your own subdomain instead of <em>blog.geoffpetrie.com</em>. This command will create the CNAME file in your source directory with the url that you want to direct people to.</p>

<p>After this all that&#8217;s needed is <code>rake generate</code> and <code>rake deploy</code>. (You may as well commit to your source branch after this.)</p>

<p>Wait a couple of minutes for things to work their way through DNS and Github&#8217;s world and you&#8217;ll be looking at your Octopress blog on your own domain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting Again With Octopress]]></title>
    <link href="http://geopet.github.com/blog/2012/08/21/starting-again-with-octopress/"/>
    <updated>2012-08-21T22:01:00-06:00</updated>
    <id>http://geopet.github.com/blog/2012/08/21/starting-again-with-octopress</id>
    <content type="html"><![CDATA[<p>Moving my <a href="http://faceofgeoff.com">Tumblr</a> to <a href="https://github.com/imathis/octopress">Octopress</a> seems to be a bit more of a chore than I had initially expected. My journey into <a href="https://github.com/mojombo/jekyll">Jekyll</a> turned out to be something that required more time that I could commit at this very moment, so I decided to take a quicker path to getting a better blogging workflow into my life by implementing some really exceptional work done <a href="http://brandonmathis.com/">Brandon Mathis</a> in Octopress as recommended by my friend <a href="http://brianarn.github.com/">Brian Arnold</a>.</p>

<p>Still, this is a new application that I haven&#8217;t had a chance to really kick the tires on. I tried to grab the less family specific pieces from the Tumblr I kept, and the more bloggy pieces from there. There is more work to be done on that front. For one, I need to get some of the original images from there for the technical pieces that I took screen captures of. In the mean time I&#8217;ll see if I can get URLs back to the original Tumblr pieces if there is any interest in that at all.</p>

<p>While I would love to spend time tweaking this install of Octopress, I suspect that I&#8217;ll spend the time I do have writing rather than tweaking for the moment. Forward progression is key for me right now, even though this is something I should dive deeper into.</p>

<p>If I ignore what I said above and fall into the abyss, I will post the tricks I find along the way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Sparrow and Google]]></title>
    <link href="http://geopet.github.com/blog/2012/08/14/on-sparrow-and-google/"/>
    <updated>2012-08-14T08:00:00-06:00</updated>
    <id>http://geopet.github.com/blog/2012/08/14/on-sparrow-and-google</id>
    <content type="html"><![CDATA[<p>So at the end of last month (July 20, 2012) there was a disturbance in the indie developer force when the great iOS/OS X gmail skin/email client Sparrow was acquired by Google.</p>

<p>I&#8217;ll provide the text of their announcement at the end of this which you can (at the time of this writing) find <a href="http://sprw.me/">on their site</a>. The gist of the press release was that they&#8217;d been bought by Google, that they&#8217;d do one more bug fix and then they&#8217;d stop working on the Apple products and start working on other Gmail stuff for Google. As a side note, it was amusing to see the long list of &#8220;advisors&#8221; and investors that they thanked as well.</p>

<p>Of course my initial reaction was disappointment. The iOS app they built was light-years ahead of the native Apple client and I found that the desktop client was a nice departure from OSX Mail. I was also excited when I saw they were heading toward a Sparrow iPad app. But, you know, Google apparently offered them all jobs and <a href="http://www.theverge.com/2012/7/20/3172365/sources-google-sparrow-25-million-gmail-client">something around $25 million</a> for them to stop working on their product.</p>

<p>A large part of the chatter regarding this buyout was the argument that it is <em>really</em> hard to make it as an independent developer. There was also talk about how $25M really isn&#8217;t that much money when all is said and done. And how this was something along the lines of a talent acquisition. I would agree with all of this.</p>

<p>But after the dust has settled what we still have is this great small software group that was given enough to stop building for Apple. And this got me thinking, and you&#8217;ll probably think I&#8217;m crazy, but I started to wonder if this could be a new business model for Google?</p>

<p>And before you call bullshit on me, just consider it for a moment. Google is lousy at UI. Just look at how they screwed up Gmail and Reader. Sparrow is beautiful. It’s one of the reasons I enjoyed using it so much. Google is also working their asses off to make Android a legit contender to iOS. Some will say that Android is already competitive with iOS. I&#8217;m not going to waste my time with this argument. Furthermore, Google’s Android OS has a huge piracy issue on their hands right now, so many devs aren&#8217;t interested in spending their time to watch their work be stolen by douchebags who won&#8217;t drop $3.99 for their year and a half of work.</p>

<p>So if you were one of the most wealthy companies on the planet and you were losing out due to lack of developer interest and a general lack of impacting talent in the UI department, why wouldn&#8217;t you bring excellent UI and mobile app developers in house to make kick ass products for your own OS? Why wouldn&#8217;t you start to cherry pick some of the exceptional talent that is out in the iOS space?</p>

<p>I think it is possible that this is the beginning of a few other talent grabs by Google. I wouldn&#8217;t be shocked if we saw the end of <a href="http://reederapp.com/">Reeder</a> and possibly <a href="http://vemedio.com/products/instacast">Instacast</a> (although I prefer <a href="http://www.downcastapp.com/">Downcast</a> for podcast players but Instacast seems to get the lion&#8217;s share of mentions), and I  hope that the <a href="http://tapbots.com/">Tapbot</a> folk or the <a href="http://dayoneapp.com/">Day One</a> guys don&#8217;t get caught in this as well. But by taking on this model, Google gets rid of the lousy Android piracy issue by giving these developers a massive hiring bonus and it gives them a regular paycheck for as long as they want to be Google employees. They never have to sell another app in a market again, but they get to keep building for the platform they love. I wouldn&#8217;t blame anyone for accepting something like that. Plus, if Google makes this a culture thing, who&#8217;s to say what else may change because of it?</p>

<p>If this really becomes a thing, it will be interesting to see what Apple does as a response.</p>

<hr />

<p><strong>Sparrow Press Release</strong></p>

<blockquote><p>We&#8217;re excited to announce that Sparrow has been acquired by Google!</p>

<p>We care a lot about how people communicate, and we did our best to provide you with the most intuitive and pleasurable mailing experience.</p>

<p>Now we&#8217;re joining the Gmail team to accomplish a bigger vision — one that we think we can better achieve with Google.</p>

<p>We’d like to extend a special thanks to all of our users who have supported us, advised us, given us priceless feedback and allowed us to build a better mail application. While we’ll be working on new things at Google, we will continue to make Sparrow available and provide support for our users.</p>

<p>We had an amazing ride and can&#8217;t thank you enough.</p>

<p>Full speed ahead!</p>

<p>Dom Leca
CEO
Sparrow</p>

<p><em>We also want to thank our advisors and investors — Loren Brichter, Dave Morin, John Maeda, Xavier Niel, Jérémie Berrebi — as well as our friends and family: Simon Istolainen, Jérémie Kanza, Sacha Cayre, Cedric Gepner, Laurent Merlinot, Didier Kuhn, Tariq Krim, Christophe Baillon, Laurent Cerveau, Christophe Giaume, Sebastien Maury, Manuel Colom, Bertrand Guiheneuf and all of you who have helped us along the way.</em></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Love Gweek]]></title>
    <link href="http://geopet.github.com/blog/2011/12/14/why-i-love-gweek/"/>
    <updated>2011-12-14T08:00:00-07:00</updated>
    <id>http://geopet.github.com/blog/2011/12/14/why-i-love-gweek</id>
    <content type="html"><![CDATA[<p><img src="http://boingboing.net/images/gweek-logo-300x250.png" align="left" hspace="5" vspace="5">I am a podcast listener. I listen to them on my commute, when I exercise, when I walk from place to place and when I craft. Essentially I try to find reasons to do things that allow me to listen to podcasts. Now because I actually <em>listen</em> to podcasts I have a hard time listening to them while I program or write. This makes me sad sometimes, but I survive.</p>

<p>Because I love podcasts so much, and the time available to me to listen to them is so little, the shows I listen to are at a minimum. This mean that if I add a show I typically need to drop a show.</p>

<p>There are problems with the medium of podcasting, but there are two that stand out for me. The first is production value. The second is time.</p>

<p>In the case of the production value, some podcasters simply don&#8217;t have the money to invest in a <a href="http://hivelogic.com/articles/podcasting-equipment-software-guide-2011/">proper setup</a>. This can mean that the show is either hard to listen to, or in some cases almost impossible. Post production work can only fix so many issues with the initial recording.</p>

<p>In the case of time, some podcasting producers seem to think that time doesn&#8217;t matter. If they have two hours to interview someone then the completed show should be released at two hours. Sometimes this works, but often it doesn&#8217;t. I&#8217;ve found that some podcasting producers are afraid of killing their babies. In the case of podcasting the baby is often the random ramblings of an overly long conversation. When this happens enough times I end up listening to the next few shows at two-time speed. If that still doesn&#8217;t remedy the tedium for the show then I just stop listening to it. Sometimes I come back, sometimes I don&#8217;t. I can be fickle, but I&#8217;m also fair.</p>

<p>But enough about my love and issues with podcasts. Let&#8217;s talk about <a href="http://boingboing.net/category/podcasts">Gweek</a>.</p>

<p><em>This is my favorite podcast.</em></p>

<p>Let me say that again.</p>

<p><strong>This is my favorite podcast.</strong></p>

<p>I&#8217;ve been a big <a href="http://boingboing.net/">Boing Boing</a> fan for years. I have recently found a way to make Boing Boing a part of my weekly routine again, after a long period of time where I just caught it as I could, but I&#8217;ll discuss this more in another post. The reason I mention Boing Boing is because Gweek is hosted by Mark Frauenfelder, the co-founder and an editor of Boing Boing (along with being the editor of the awesome <a href="http://makezine.com/">Make Magazine</a> &#8211; that I was just given as a Christmas gift from my parents). It is usually co-hosted by the oft-late (because of <a href="http://www.amazon.com/exec/obidos/ASIN/B004HYK956/boingboing">Skyrim</a>) Rob Beschizza, Managing Editor of Boing Boing, and Ruben Bolling, the mastermind behind <a href="http://gocomics.typepad.com/tomthedancingbugblog/">Tom the Dancing Bug</a>.</p>

<p>Before I became a regular listener, each time Gweek was mentioned on Boing Boing I always said that I should at least check out an episode. Finally I did. It was <a href="http://boingboing.net/2011/11/14/gweek-podcast-episode-026-a-h.html">episode 26</a>. The reason I decided on this one was because it mentioned in the show notes about how Mark had an addiction to Dungeon Raid. I suffer from the same affliction, so I had to hear about how he avoided the intervention that I would typically require.</p>

<p>The show begins, &#8220;Gweek is where the editors and friends of Boing Boing talk about comic books, science fiction and fantasy, video games, board games, tools, gadgets, apps and other neat stuff.&#8221; Everything that I like!</p>

<p>When I had finished listening, it was clear that I had found a show that I would need to make room for on my <del>dance card</del> playlists.</p>

<p>Joel Johnston was a guest/co-host of the show. I&#8217;ve been an admirer of Mark, Rob and him for some time. Joel did not disappoint and the conversation was filled with humor and insight. It was great. I was especially pleased about the discussion of <a href="http://www.minecraft.net/">Minecraft</a>, a game that I have recently started playing and enjoyed, the <a href="http://www.amazon.com/exec/obidos/ASIN/B004VQENY8/boingboing">Skylanders game</a>, that I had heard of but knew almost nothing about, the book <a href="http://www.amazon.com/exec/obidos/ASIN/0143119826/boingboing">The Postmortal</a>, that I immediately added to my Amazon wish list, and, of course, the iOS game <a href="http://itunes.apple.com/us/app/dungeon-raid/id403090531?mt=8">Dungeon Raid</a>.</p>

<p>It was the next day that the next episode with <a href="http://boingboing.net/2011/11/21/gweek-episode-028-we-are-all.html">Seth Godin</a> came out. I got to listen to some of it as I went for a short run. Seth as a guest was super insightful and a great conversationalist. I got to learn more about his work on <a href="http://www.thedominoproject.com/">The Domino Project</a>. I am late to this game, but I found it a fascinating experiment. Mark also gave us a heads-up on <a href="http://blog.makezine.com/tag/collinslab">Collin&#8217;s Lab</a>. After watching one of his short seven minute videos I know more about electronics schematics than I ever have before. I also added <a href="http://www.amazon.com/exec/obidos/ASIN/1565235592/boingboing">Handmade Music Factory</a> to my Amazon wish list. This stuff is so cool.</p>

<p>And I couldn&#8217;t wait another week to hear the next one, so I started to go back to the earlier episodes. They&#8217;re all this good.</p>

<p>I listened to the episode with <a href="http://boingboing.net/2011/10/31/127095.html">John Hodgman</a>, and while I disagreed with the opinions regarding the DC Reboot (I actually am excited about being able to get into comic story lines that make sense), I am now reading <a href="https://comics.comixology.com/#/view/1/Atomic-Robo-1-of-6-">Atomic Robo</a> because of the conversation. It is <em>really</em> good. John continued the string of great guests.</p>

<p>I listened to the episode with <a href="http://boingboing.net/2011/10/24/gweek-023-cool-apps-and-websit.html">David-Michel Davies</a>, the executive director of the Webbies. I signed up for the <a href="http://netted.net/">Netted</a> email list after that episode and had a half dozen sites that I needed to check out.</p>

<p>And the episode with <a href="http://boingboing.net/2011/11/07/gweek-podcast-025-michael-kupp.html">Michael Kupperman</a> led to my education on the comic strip <a href="http://www.amazon.com/exec/obidos/ASIN/B0054U5862/boingboing">Cul de Sac</a>, <a href="http://www.darkhorse.com/Comics/16-912/Orchid-1-Massimo-Carnevale-cover">Orchid</a> and <a href="http://thelastmanalive.tripod.com/home.html">The Last Man Alive</a>.</p>

<p>But the last two episodes, the one with Jon Ronson, author of <em>The Men Who Stare at Goats</em>, and the other with Maggie Koerth-Baker, the Boing Boing Science Editor, have just been off the charts good. Jon and Maggie were endlessly entertaining and interesting. By the end of Jon&#8217;s episode I had already purchased his <a href="http://www.amazon.com/exec/obidos/ASIN/B005ZOCFNQ/boingboing">ebook</a>, which was great, and started to wonder who around me was a psychopath. By the end of Maggie&#8217;s episode, I had a new web comic to start reading (<a href="http://oglaf.com/">Oglaf</a>, which is absolutely fantastic and <em>totally</em> NSFW), I couldn&#8217;t wait for <a href="http://www.amazon.com/exec/obidos/ASIN/0470876255/boingboing">Maggie&#8217;s new book</a> to be released, and I wished I had the time to play Skyrim.</p>

<p>I&#8217;m now back as far as <a href="http://boingboing.net/2011/10/18/gweek-022-the-fishbone-documen.html">episode 22</a>, and I like this show so much that I plan on going through the rest of the catalog.</p>

<p>But let&#8217;s run full circle here. My two big complaints about podcasts are production value and time. Well Mark Frauenfelder keeps the time perfect. I don&#8217;t think there&#8217;s been a show that&#8217;s gone much beyond an hour. I <em>really</em> appreciate that. The production value leaves something to be desired. Mark occasionally remarks that his USB mic needs to be unplugged and replugged, and there are some occasional challenges with static and background noise. But the quality of the conversation is so excellent that these details become insignificant. I would listen to this show while they sat on a steam powered train.</p>

<p>So if you&#8217;re looking for a podcast that is filled with geeky, neat and thoughtful conversation, along with great recommendations of terrific media, you <em>must</em> listen to <a href="http://boingboing.net/category/podcasts/">Gweek</a>. I can&#8217;t get enough.</p>

<h2>TL;DR</h2>

<ul>
<li><a href="http://boingboing.net/category/podcasts">Gweek</a> is awesome.</li>
<li>Go listen to <a href="http://boingboing.net/category/podcasts">Gweek</a>.</li>
</ul>


<h2>Follow Up</h2>

<p>I&#8217;m currently listening to <a href="http://boingboing.net/2011/12/12/gweek-030-supergods-mutants.html">Gweek 30</a>. Guest <a href="http://sketchyrobots.com/">Barry McWilliams</a> is terrific. I love hearing about the artist process and this show definitely gets into that.</p>

<p>Also, <a href="http://www.amazon.com/exec/obidos/ASIN/160699347X/boingboing">Dungeon Quest, Book One</a> has already been added to my Amazon Wish List.</p>

<p>I&#8217;ll probably end up finding a way to finish up the episode tonight after my oldest goes to sleep.</p>

<h2>Follow Up Two</h2>

<p>This has really tickled me. I wrote a short note to Mark Frauenfelder about how much I like the show and he posted it on <a href="http://boingboing.net/2011/12/12/email-from-a-gweek-reader.html">Boing Boing</a>. I think that&#8217;s pretty cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Great Tip on Apple IDs]]></title>
    <link href="http://geopet.github.com/blog/2011/10/12/great-tip-on-apple-ids/"/>
    <updated>2011-10-12T12:48:00-06:00</updated>
    <id>http://geopet.github.com/blog/2011/10/12/great-tip-on-apple-ids</id>
    <content type="html"><![CDATA[<blockquote><p>But what if I share my Apple ID?</p>

<p>If you use your Apple ID on multiple devices to buy apps (say, if you have one central account for your, your spouse’s, and your children’s purchases), it’s best not to convert it into an iCloud account. Although your installed iCloud account is, by default, the one you’ll use to purchase music and apps with, you can still manually sign in and out of the App and iTunes Stores on your device. Instead, you should create an entirely separate account to use with iCloud.</p></blockquote>

<p>Awesome tip from Macworld&#8217;s <a href="http://www.macworld.com/article/162963/2011/10/meet_icloud_apples_new_sync_service.html">Getting started with iCloud, Apple&#8217;s new sync service</a> article.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Service Using Automator for nvALT Notes Version Control]]></title>
    <link href="http://geopet.github.com/blog/2011/09/21/creating-a-service-using-automator-for-nvalt-notes-version-control/"/>
    <updated>2011-09-21T08:00:00-06:00</updated>
    <id>http://geopet.github.com/blog/2011/09/21/creating-a-service-using-automator-for-nvalt-notes-version-control</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>I&#8217;m going to get a pretty nerdy here for a moment.</p>

<p>So I dove in and I&#8217;m now using <a href="http://brettterpstra.com/project/nvalt/">nvALT</a>, <a href="http://www.secondgearsoftware.com/elements/">Elements</a> and <a href="http://git-scm.com/">Git</a> for
my note taking needs. Aside from a few minor hiccups, which I&#8217;ll address
in a later post, this is really working nicely.</p>

<p>The one thing that I needed when I added nvALT and Elements to my note
taking workflow was the ability to easily continue version control with
Git. Before taking on this new process I was using Git in my notes
directory and I wasn&#8217;t about to lose that option now.</p>

<p>But the ease which nvALT allows me to create new text files, and with
nvALT built to work better with <a href="http://brettterpstra.com/break-up-your-text-documents/">smaller files</a>, I need some way to get my
version control under control.<a href="For">^version</a></p>

<p>Here&#8217;s what my workflow was:</p>

<ol>
<li>Work, notes, work, notes.</li>
<li>Work, notes, work, notes.</li>
<li>Look at the time.</li>
<li><em>Damn! How long has it been since I last did a commit?</em></li>
<li>cd to my notes directory.</li>
<li>Commit my notes to my repository.</li>
</ol>


<p>It wasn&#8217;t really precision based. Plus it had the added detriment of
taking me out of what I was doing to commit my notes.</p>

<p>What I did<a href="My">^original</a> was create a Bash script and then used Automator to create a
Service for it that I also applied a keyboard shortcut to.</p>

<p>If you&#8217;re still with me, here&#8217;s how I did it:</p>

<h2>The Reveal</h2>

<p>First<a href="This">^realfirst</a>, create your Bash script.</p>

<p>I keep all my notes in one directory. This is the way that nvALT and, it
seems, Elements like to work. With some light taxonomy (ala <a href="http://macpowerusers.com/2011/03/mpu-046-workflows-with-merlin-mann-ii/">Merlin Mann
and Mac Power Users</a>) I have a reasonably good system in place. All
my notes are in a <a href="http://db.tt/eOrvceA">Dropbox</a> subdirectory called &#8220;notes.&#8221;</p>

<p>To get this to work I created a Bash script named <code>git_notes.sh</code> and put
this in it:</p>

<pre><code>#!/bin/bash

cd /Users/username/Dropbox/notes/
git add .
git commit -m 'nvALT Service Commit'
echo "* "`date`" nvALT Commit" &gt;&gt; /Users/username/Dropbox/notes/noteCommits`date "+%Y%m%d"`.md
</code></pre>

<p>Now, you&#8217;ll see that this is redundant and probably a lot silly, but
this is what it does.</p>

<ol>
<li>It makes sure that we&#8217;r in my notes directory using the absolute pathname.</li>
<li>It stages only the modified files to the repository.<a href="This">^keypoint</a></li>
<li>It commits those changes and uses a standard message for my Git
log file.</li>
<li>The last line is where it gets a little silly, it appends to another
file in the same Dropbox subdirectory with a message that also gives a
human readable date/time. Why am I doing this? I don&#8217;t know, maybe
someday I&#8217;ll set up something to parse it to get some analytics of when
I do most of my commits for my notes file.</li>
</ol>


<p>But now that we have our Bash script. The rest is <em>trivial</em>.</p>

<p>First, we open <a href="http://support.apple.com/kb/ht2488">Automator</a> and select &#8220;Service&#8221; as our document type
under the &#8220;Choose a type for your document:&#8221;</p>

<p><img src="../images/creating-a-service-01.png" alt="" /></p>

<p>Next, we&#8217;re going to change the &#8220;Service receives&#8221; from the default
&#8220;text&#8221; to &#8220;no input&#8221;. Leave the &#8220;in&#8221; &#8220;any application&#8221; as it is.</p>

<p><img src="../images/creating-a-service-02.png" alt="" /></p>

<p>Penultimately, we click &#8220;Utilities&#8221; under the left-side &#8220;Library&#8221; dropdown and
then drag the &#8220;Run Shell Script&#8221; from the middle column over to the
right side.</p>

<p><img src="../images/creating-a-service-03.png" alt="" /></p>

<p>Lastly, we enter in the location of the script in the workflow. It&#8217;s a
good idea to use the absolute pathname here. In my case it was
<code>/Users/username/Dropbox/notes/git_notes.sh</code>.</p>

<p>Once you save you&#8217;ll have a Service that will be available from any
of your application menus. Click on the Service and it will do a Git
commit of all the changes to that notes directory as well as update the
faux log file we&#8217;ve created for the day.</p>

<p><img src="../images/creating-a-service-04.png" alt="" /></p>

<p>But I don&#8217;t like to use the mouse/trackpad that much. So the final touch
to this is to create a keyboard shortcut in your System Preferences. Go
to <code>Applications &gt; System Preferences &gt; Keyboard</code>. Then choose &#8220;Keyboard
Shortcuts&#8221; and select &#8220;Services&#8221; from the left side. Your new Service
should be at the end of the Services listings. Just click the blank
space at the far end of the window and you should get a text input
field. You can use anything you want for your shortcut, but I chose
control-option-command-shift-s for mine to avoid any chance of a
keyboard conflict.</p>

<p><img src="../images/creating-a-service-05.png" alt="" /></p>

<h2>Conclusion</h2>

<p>So there you have it. A quick and dirty way to make sure that the notes
you&#8217;re producing will be version controlled through Git. As a final
remark, I&#8217;ll say that having version control has already paid off for
me.</p>

<p>I use multiple computers and I made the <em>huge</em> mistake of accidentally
deleting a bunch of files when a prompt popped up and I didn&#8217;t read
exactly what it said. All of a sudden 20-some-odd notes of mine were
<em>gone</em>. But version control to the rescue! I <em>knew</em> I had just committed
to my repo before I had deleted the files and I was able to pull them
back from brink of deletion hell. But this was even easier than it could
have been because I had been using <code>git add .</code> instead of <code>git add -a</code>.
All it meant was that I needed to unstage the deleted files. It was
great and a perfect reason why doing something like this makes sense.</p>

<h2>Post Script</h2>

<p>I should add that the use of a common/standard commit message is bad
practice. The reason I do this, instead of throwing a prompt so that I
can enter in a more detailed message, is that this is supposed to create
a workflow that won&#8217;t interrupt what you&#8217;re in the middle of but give
you the peace of mind that you&#8217;ve got things in a version controlled
environment. This <em>does not</em> prevent you from going to your notes
directory and doing a proper Git commit with a detailed message on what
you&#8217;ve done since your last commit. In fact, at the end of this
paragraph I&#8217;ll be committing properly to say that this draft is
finished. And when I finish my review of the draft I&#8217;ll commit again,
and message that it is ready for posting. After that, I&#8217;ll probably do a
name change to the file (this is the taxonomy thing I mentioned before)
and then do another <em>proper</em> commit.</p>

<p>One last point: You may have noticed that you can easily change the Bash
script to point to any directory you want. Once you have the Service in
place, you can edit your <code>.sh</code> file whenever you please and have a
temporary keyboard shortcut for Git repo commits. I think that&#8217;s kinda
cool.</p>

<p>If you don&#8217;t have one and want to learn how, you can check out my
<a href="http://faceofgeoff.com/post/5383300462/learning-git">post</a> on the subject of Git.</p>

<p>and then have it run through <a href="http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/launchctl.1.html">launchctl</a> on a regular basis.</p>

<p>staging any files for <em>deletion</em> only modification. This means I won&#8217;t
worry about any files going away without my knowing.</p>

<p><em>I originally posted this tutorial on my Tumblr: <a href="http://faceofgeoff.com/post/10480335918/creating-a-service-using-automator-for-nvalt-notes">The Face of Geoff</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Temp Text Expander Tip]]></title>
    <link href="http://geopet.github.com/blog/2011/09/20/temp-text-expander-tip/"/>
    <updated>2011-09-20T16:00:00-06:00</updated>
    <id>http://geopet.github.com/blog/2011/09/20/temp-text-expander-tip</id>
    <content type="html"><![CDATA[<blockquote><p>Don’t hesitate to create temporary TextExpander snippets for a specific project, but put them in a ‘Temp’ folder so that you can easily delete them when done.</p></blockquote>

<p>This is <em>such</em> a good idea.<br/>
<a href="http://www.practicallyefficient.com/2011/08/30/1l-te/">One line at a time #16: TextExpander</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nvAlt Quick Tip]]></title>
    <link href="http://geopet.github.com/blog/2011/09/20/nvalt-quick-tip/"/>
    <updated>2011-09-20T08:00:00-06:00</updated>
    <id>http://geopet.github.com/blog/2011/09/20/nvalt-quick-tip</id>
    <content type="html"><![CDATA[<h2>Making Markdown Readable and Your Default File Type</h2>

<p>So normally I don&#8217;t write tips on productivity, but lately I have been
focusing more and more on workflow and I decided to start diving deeper
into things like Brett Terpstra&#8217;s
<a href="http://brettterpstra.com/project/nvalt/">nvALT</a>, Smile&#8217;s
<a href="http://www.smilesoftware.com/TextExpander/">TextExpander</a>, and Second
Gear&#8217;s <a href="http://www.secondgearsoftware.com/elements/">Elements</a> (ala <a href="http://macpowerusers.com/">Mac
Power Users</a>, <a href="http://5by5.tv/b2w">Back to
Work</a> and <a href="http://www.merlinmann.com/">Merlin
Mann</a>). This means you may see so more stuff
from me regarding cool tools like these.</p>

<p>But this is a quick tip. So here it is:</p>

<p>When I installed nvALT there were two pieces that threw me right away.
First, even after going into the preferences and changing &#8220;Read notes
from folder&#8221; to the folder that had all my Markdown notes it didn&#8217;t
register any of them in the search.  The reason? I needed to change the
&#8220;Store and read notes on disk as&#8221; drop down from &#8220;Single Database&#8221; to
&#8220;Plain Text Files&#8221; and then I needed to add the file extension &#8220;md&#8221; to
the &#8220;Recognize individual files with attributes:&#8221; extensions. Check out
the screen capture below if this isn&#8217;t quite making sense. (Also note
that there is a &#8220;+&#8221; in that preference window, next to the &#8220;-&#8221; symbol,
but it isn&#8217;t showing right now in Lion.<a href="Many">^pe</a>)</p>

<p><img src="http://media.tumblr.com/tumblr_lqtxi4bkBW1qfn6cf.png" alt="" /></p>

<p>The second item that started to bug me was that any new note/file that I
created was being created with the <code>.txt</code> extension instead of the <code>.md</code>
extension that I work in all the time now. Frankly, if I couldn&#8217;t fix
this issue, I would have probably abandoned nvALT almost right away.
Fortunately, I found that by selecting &#8220;md&#8221; in the &#8220;Recognize individual
files with attributes:&#8221; list and then hitting the check mark, it bolded
it and my tests have showed that all my new files being made by nvALT
are now <code>.md</code> files.</p>

<p>With these two items out of the way I plan to seriously play with this
system.</p>

<p>If, by some freakish chance Brett Terpstra checks out this post, one
feature request that I would make right now is to allow for the use of
his <a href="http://markedapp.com/">Marked</a> app for the preview instead of only
having the built in, but excellent, nvALT HTML preview. There&#8217;s a good
chance that it is already a feature and I&#8217;m not aware of it. I&#8217;m loving
Marked, and if you&#8217;re a Markdown person and not using it yet, you should
definitely check it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Little Details]]></title>
    <link href="http://geopet.github.com/blog/2011/09/07/little-details/"/>
    <updated>2011-09-07T08:00:00-06:00</updated>
    <id>http://geopet.github.com/blog/2011/09/07/little-details</id>
    <content type="html"><![CDATA[<p>So <a href="http://www.mozilla.org/firefox/">Firefox</a> needed to do an update today. 6.0.2, I think. When I did the update the obligatory additional page was added to my tabs showing me that I was now fully updated. I was struck by the page, though:</p>

<p><img src="http://media.tumblr.com/tumblr_lr5xtjqibW1qfn6cf.png" alt="" /></p>

<p>Of course I reloaded the page several times, and still the page looked the same. Now maybe I expect too much, but if you&#8217;re going to promote something then the promo should look good. The styling for the &#8220;Tabs, Meet Groups&#8221; promotion stands out for all the wrong reasons. The padding, the lack of easily findable links, and what is with the way &#8220;Name&#8221; and &#8220;Drag&#8221; are just hanging there?</p>

<p>I&#8217;m sure there is a simple explanation for this. It&#8217;s likely a css file that&#8217;s missing in a specific directory. But if you&#8217;re going to push this page after making me do an update, I&#8217;d make sure that it was 100%. Especially when you&#8217;re promoting something to make you stand out against other great browsers like <a href="http://www.apple.com/safari/">Safari</a> and <a href="http://www.google.com/chrome">Chrome</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iCloud]]></title>
    <link href="http://geopet.github.com/blog/2011/09/02/icloud/"/>
    <updated>2011-09-02T08:00:00-06:00</updated>
    <id>http://geopet.github.com/blog/2011/09/02/icloud</id>
    <content type="html"><![CDATA[<p>I have to say, I&#8217;m getting pretty jazzed about iOS5 coming out, and,
more specifically <a href="http://www.apple.com/icloud/">iCloud</a>. The video below was referenced by a <a href="http://www.practicallyefficient.com/2011/09/01/sync/">Practically
Efficient</a> article
that was building off a great article by <a href="http://www.macsparky.com/blog/2011/9/1/multi-platform-is-a-feature.html">David
Sparks</a>
regarding how iCloud will be the future to proper mulit-platform
computing. As David says in his article, when data just <em>is</em> then it
doesn&#8217;t matter what device you&#8217;re working on.</p>

<p>Why the video? John Gruber makes it very clear that the reason why data
can now just <em>be</em> is because Apple has worked its ass off to be a leader
in open web technologies.</p>

<object width="480" height="295"><param name="movie" value="http://www.youtube.com/v/Qss5RnD7wK8?version=3"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/Qss5RnD7wK8?version=3" type="application/x-shockwave-flash" width="480" height="295" allowscriptaccess="always" allowfullscreen="true"></embed></object>


<p>Web 2.0 Expo NY 2010:  John Gruber, &#8220;Apple and the Open Web&#8221; (by <a href="http://www.youtube.com/watch?v=Qss5RnD7wK8">OreillyMedia</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Git]]></title>
    <link href="http://geopet.github.com/blog/2011/05/10/learning-git/"/>
    <updated>2011-05-10T10:30:00-06:00</updated>
    <id>http://geopet.github.com/blog/2011/05/10/learning-git</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>For the record, much of this is unabashedly lifted from <em>Pro Git</em> book I
can&#8217;t even remotely suggest that this content is original to me. Sure,
I&#8217;ve added my own two cents now and then, but do yourselves a favor and
read the first three chapters of <a href="http://progit.org/book">Pro Git</a>. In
fact, if any of this doesn&#8217;t make sense, it is probably because I
haven&#8217;t correctly paraphrased <em>Pro Git</em> and you should just consult the
book in that case.</p>

<p>One thing you&#8217;ll definitively need to use Git locally is Git running on
your computer. There are lots of tutorials and ways to do it, I think
<a href="http://progit.org/book/ch1-4.html">this tutorial</a> will work or you can
<a href="http://git-scm.com/">just go to the source</a> and download the latest
stable release of Git.</p>

<p>The other item that you&#8217;ll likely find useful in using Git as well as
for many other things, is a <a href="http://db.tt/eOrvceA">Dropbox account</a>. By
using Git in a Dropbox managed folder you get your own local repository
in the cloud. The Basic account type is free and comes with 2GB of
storage. That&#8217;s probably plenty if you plan to mainly do textish style
file management. If it isn&#8217;t enough space, hey, just get a paid account.
The service is awesome. The link that I give for the Dropbox account is
a referral link for me. It just me an extra 250MB of storage to my
account if you use it. If you&#8217;d rather not use that link then try
<a href="http://www.dropbox.com">http://www.dropbox.com</a>. I picked up this tip when I attended a
Webuquerque called <em>Getting With Git</em> that was presented by <a href="http://www.randomthink.net/">Brian
Arnold</a>.</p>

<p>Finally, this is not supposed to be a full explanation of how to use
Git. If you want that, as I said above, read the first few chapters of
<a href="http://progit.org/book">Pro Git</a>. The purpose of this is to touch on
basics of getting started and some of the more common commands. I used
Git while writing this document and I really enjoyed its simplicity.
From my perspective, this is worth your time to understand.</p>

<!-- more -->


<h2>Getting Started</h2>

<p>After installation of Git on your system you need to configure Git with
identities for your machine:</p>

<pre><code>$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
$ git config --global core.editor vim
</code></pre>

<p>This will give the repo info on who you are and what your editor of
choice is.</p>

<pre><code>$ git config --list
user.name=Geoff Petrie
user.email=gpetrie@email.com
core.editor=vim
</code></pre>

<p>To get help:</p>

<pre><code>$ git help &lt;verb&gt;
</code></pre>

<p>eg,</p>

<pre><code>$ git help config
$ git help commit
$ git help branch
$ git help tag
</code></pre>

<p>To start tracking an existing project locally go to the directory/folder
in your command line and enter this command:</p>

<pre><code>$ git init
</code></pre>

<p>This will create the .git subdirectory/subfolder, but nothing is
actually being tracked by Git yet. To begin tracking:</p>

<pre><code>$ git add *.php
$ git add *.docx
$ git add awesome_documentation.txt
$ git commit -m "adding documents to be version controlled"
</code></pre>

<p>In that previous command you added all the .php files in the directory
you ran the <code>git init</code> command in, all the .docx (Word) files and a text
file called <code>awesome_documentation.txt</code>. Then you committed those
documents to your local repository with the <code>git commit</code> command.</p>

<p>Congratulations, you&#8217;re now version controlling your work.</p>

<p>Another command you should know:</p>

<pre><code>$ git status
</code></pre>

<p>This will let you know whether you have a file(s) in the staging area
and ready to check in or something that has been tracked, has been
changed, but isn&#8217;t in the staging area or you have untracked files in
the directory you ran <code>$ git init</code>.</p>

<pre><code>$ git diff
</code></pre>

<p>This command will show what you&#8217;ve changed but haven&#8217;t staged yet.</p>

<pre><code>$ git commit
</code></pre>

<p><code>git commit</code> commits your changes to your local repo. In this case it
will also launch your editor of choice where you will enter in a note
regarding the changes to the document you&#8217;ve made. When you save and
quit the editor your commit will be completed. To avoid launching your
editor add the <code>-m</code> flag:</p>

<pre><code>$ git commit -m "these changes will revolutionize the fashion industry."
</code></pre>

<p>Adding the <code>-a</code> flag to your commit will allow you to avoid the staging
area and commit files that have been modified immediately:</p>

<pre><code>$ git commit -a -m "this will commit straight into my repo, no staging required."

$ git rm file.txt
</code></pre>

<p>Removes <code>file.txt</code> from your repo (and from your working directory).</p>

<pre><code>$ git rm --cached file.txt
</code></pre>

<p>Removes <code>file.txt</code> from your repo but <em>not</em> from your working directory.
(Good for when you may have accidentally added a bunch of files in your
repo that you didn&#8217;t want to track, like complied files or admin text
files that you meant to put in your <code>.gitignore</code>.</p>

<pre><code>$ git mv file_from file_to
</code></pre>

<p>This is tied for my favorite command in Git. It renames the file and on
your next commit it renames it in your repo <em>and</em> your working
directory. So sexy. (My other favorite Git command is <code>$ git checkout -b
new_branch</code>, which I will get to in a moment.)</p>

<p>Here&#8217;s how you can find out the changes that have taken place in your
repo:</p>

<pre><code>$ git log

$ git log -p -2
</code></pre>

<p>The <code>-p -2</code> shows a diff and only the last two commits.</p>

<pre><code>$ git log --stat
</code></pre>

<p>Gives abbreviated stats for each commit.</p>

<p>The <code>--pretty</code> option allows you to use a prebuilt style or a style you
design to display the log. A pretty slick prebuilt is <code>oneline</code>:</p>

<pre><code>$ git log --pretty=oneline
</code></pre>

<p>Oooh. This is pretty awesome, too:</p>

<pre><code>$ git log --pretty=format:"%h - %an, %ar : %s"

$ git log --since-2.weeks
</code></pre>

<p>This gives you only the changes that have happened in the last couple of
weeks.</p>

<p>The following commands allow you to commit a bunch of files, and then
add a file or two that you forgot to add in that last commit and add
them to that previous commit so that they all live happily ever after in
the same commit:</p>

<pre><code>$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
</code></pre>

<p>Sometimes you need to remove files from the staging area:</p>

<pre><code>$ git reset HEAD file_I_do_not_want.py
</code></pre>

<p>If you don&#8217;t want to keep the changes to the file you have in the
staging area you can just revert the file back to the way it was in the
previous commit. <em>Be careful</em> this is not something you can undo:</p>

<pre><code>$ git checkout -- file_I_want_to_change_back.py
</code></pre>

<h2>Tags</h2>

<p>Oh man. Now we&#8217;re moving forward. Let&#8217;s chat about <em>tagging</em>. Tagging is a
great place to mark a specific point in your version history as
important. This is perfect for a release point, i.e., v1.0.</p>

<p>To list the tags in Git you just fire off this command:</p>

<pre><code>$ git tag
v0.9
v1.0
v1.1
</code></pre>

<p>To annotate a tag:</p>

<pre><code>$ git tag -a v1.4 -m 'my version 1.4 is the best thing ever.'
</code></pre>

<p>Here&#8217;s how you see the data:</p>

<pre><code>$ git show v1.4
</code></pre>

<p>You can also tag a commit later in its life:</p>

<pre><code>$ git log --pretty=oneline
9352eecf208721b29e73527219b64a5cbd175918 changes to april_notes, readded (with c
9a4ccbebdcd934123831eb2ab4e1a6031d391c9a changes to iss53, newtest and april_not
d8dddfe59b90fc80bc66571fe5364a40c0012503 Adding the newtest.markdown and complet

$ git tag -a v1.1.0 9a4ccbe
</code></pre>

<p>Note you take the first part of that crazy list of numbers and letters
(the checksum) and add it to the end so that Git can identify which
commit you want to tag. God, isn&#8217;t that simplicity awesome?</p>

<h2>Branching</h2>

<p>Now, let&#8217;s talk about <em>branching</em>.</p>

<p>For a more detailed discussion into branching, take a look at the
branching chapter in the <a href="http://progit.org/book/ch3-1.html">Git Pro
book</a>. For this discussion, I&#8217;m going
to show you the basic commands and what they do.</p>

<pre><code>$ git branch
</code></pre>

<p>Lists the branches already in your repository. Keep in mind that the
branch you&#8217;ll likely find yourself in at first is your &#8220;master&#8221; branch.
This isn&#8217;t necessarily the one you&#8217;ll be spending the most of your time
in, but it is the default.</p>

<pre><code>$ git branch name_of_new_branch
</code></pre>

<p>This creates a new branch, eg, <code>$ git branch testing</code> will create the
branch &#8220;testing.&#8221;</p>

<pre><code>$ git checkout testing
</code></pre>

<p>This changes the branch you are working on to the testing branch. The
master branch is the common branch that you would normally be working
in until you checkout another branch.</p>

<pre><code>$ git checkout -b new_branch
</code></pre>

<p>This is a shorthand command to create and checkout a new branch. <em>Very
handy.</em></p>

<pre><code>$ git merge &lt;branch name&gt;
</code></pre>

<p>This command allows you to merge into your current branch another
branch&#8217;s work.</p>

<pre><code>$ git branch -d &lt;branch name&gt;
</code></pre>

<p>The -d flag allows you to delete a branch.</p>

<p>Things get a little complex when you attempt to merge files that have
been changed in the same place in different branches. You&#8217;ll likely get
something like this:</p>

<pre><code>$ git merge doc_test
Auto-merging newtest.markdown
CONFLICT (content): Merge conflict in newtest.markdown
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p>Here you&#8217;ll want to run <code>$ git status</code> to find out what issue is. You&#8217;ll
see something like this:</p>

<pre><code>$ git status
# On branch master
# Changes to be committed:
#
#   new file:   testfile1.txt
#   new file:   testfile2.md
#   new file:   testfile3.php
#
# Unmerged paths:
#   (use "git add/rm &lt;file&gt;..." as appropriate to mark resolution)
#
#   both modified:      newtest.markdown
</code></pre>

<p>For more information you can also run <code>$ git diff</code> to see what changes
are actually in play here.</p>

<pre><code>$ git mergetool
</code></pre>

<p>The mergetool will launch an appropriate visual merging tool that will
walk you through the conflicts.</p>

<p>One piece that I didn&#8217;t cover earlier is how to revert back to a
different version of a file. To do this it requires a few different
commands.</p>

<p>First we want to check out the logs to see what changes we&#8217;ve committed.
After that we can use <code>diff</code> to see the difference in the files. Once
we&#8217;re sure we are reverting to the correct version we use the <code>checkout</code>
command.</p>

<pre><code>$ git log
commit 9e3b120796ed005f7542a73b20119870c8a966f7
Author: Geoff Petrie &lt;gpetrie@email.edu&gt;
Date:   Wed May 4 15:21:23 2011 -0600

    testing this commit after reverting to an older git_info.md file.

commit cfd3c3980d5c04e976fbf7b3ab7a36e277b75259
Author: Geoff Petrie &lt;gpetrie@email.edu&gt;
Date:   Wed May 4 13:46:53 2011 -0600

    adding new commands, about to try reverting back a commit.

commit 5407fc34f57f6dc6517a38194efa1a589f9a09ad
Author: Geoff Petrie &lt;gpetrie@email.edu&gt;
Date:   Wed May 4 13:17:13 2011 -0600

    a little change in the git doc

commit 62d8d7e8fc12fcd0f1cfc170a1a847f622514e34
Merge: c0ec484 6aa6a00
Author: Geoff Petrie &lt;gpetrie@email.edu&gt;
Date:   Wed May 4 13:12:59 2011 -0600
</code></pre>

<p>We now have a nice list of a few previous commits.</p>

<pre><code>git diff 5407fc34f57f6dc6517a38194efa1a589f9a09ad git_info.md 
diff --git a/git_info.md b/git_info.md
index 31f9fb0..d6d71fd 100644
--- a/git_info.md
+++ b/git_info.md
@@ -248,3 +248,10 @@ The mergetool will launch an appropriate visual merging tool that will
 walk you through the conflicts.

 This concludes the basics of how to get started
+
+Other handy commands:
+
+    $ git log --abbrev-commit --pretty=oneline
+
+Provides an abbreviated SHA-1 of your git log, a nice thing to have when
+you're trying to choose specific commits.
</code></pre>

<p>Now we have our diff in the file we&#8217;re interested in reverting back.</p>

<pre><code>$ git checkout 5407fc34f57f6dc6517a38194efa1a589f9a09ad git_info.md
</code></pre>

<p>This brings the git info.md file into our current working directory from
here we can now make changes to that file or commit immediately. The
beauty? If we&#8217;re unhappy with this, we can just revert back to the
previous commit through the same process.</p>

<p>A word of warning: You <strong>can</strong> lose data this way. Anything you&#8217;ve
committed to your repository you won&#8217;t lose, but if you&#8217;re working on a
file and then decide to mess with its version without committing, you&#8217;ll
lose the work you&#8217;ve done. Good rule of thumb with version control: Just
commit your work.</p>

<p>This concludes the basics of how to get started with git. Something that
I haven&#8217;t covered here is how to manage a repository that is remote like
on GitHub or some other server. I may get to this later, but that is
definitely outside the scope of this document.</p>

<p>If you find something here that doesn&#8217;t make sense or you believe is incorrect, please feel free to let me know.</p>

<h2>Command list:</h2>

<p>I&#8217;m going to list a few commands here that you can use as a quick
reference. You may find this link to <a href="http://git-scm.com/documentation">Git
Documentation</a> more useful. Scroll to
the bottom of that link for the command list.</p>

<pre><code>$ git config --list
$ git init
$ git add *.php
$ git commit -m "adding documents to be version controlled"
$ git commit -a -m "using the -a flag is a shortcut"
$ git status
$ git diff
$ git rm file.txt
$ git rm --cached file.txt
$ git mv file_from file_to
$ git log
$ git log --pretty=oneline
$ git tag -a v1.4 -m 'my version 1.4 is the best thing ever.'
$ git branch name_of_new_branch
$ git checkout -b new_branch
$ git merge &lt;branch name&gt;
$ git branch -d &lt;branch name&gt;
$ git merge &lt;branch name&gt;
$ git mergetool
$ git checkout &lt;SHA-1&gt; &lt;file name&gt;
</code></pre>

<p>Another handy command:</p>

<pre><code>$ git log --abbrev-commit --pretty=oneline
</code></pre>

<p>Provides an abbreviated SHA-1 of your git log, a nice thing to have when
you&#8217;re trying to choose specific commits.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helpful Linux Commands]]></title>
    <link href="http://geopet.github.com/blog/2011/04/05/helpful-linux-commands/"/>
    <updated>2011-04-05T14:30:00-06:00</updated>
    <id>http://geopet.github.com/blog/2011/04/05/helpful-linux-commands</id>
    <content type="html"><![CDATA[<p>I was asked to give a bunch of detail on a server that I use so that I could request permission to participate in migrating some of the web work I do onto a new CMS. The requests seemed fine, but the form provided no way of easily estimating the file numbers they requested. I used these linux commands to find the details I needed:</p>

<p><code>find . -type f -name '*.php' | wc -l</code> gave me the number of files I had in the directory with .php file extensions.</p>

<p><code>du /var/www/html/ -ch | grep total</code> gave me the total amount of disk space being used in the directory in &#8220;human readable&#8221; format.</p>

<p><code>/sbin/ifconfig</code> gave me the ip address of the server the information was currently sitting on.</p>

<p>I had to look up the first one, I didn&#8217;t know how to get down to that sort of granularity, but I think the others are worthy of documenting here in case someone finds some use in them.</p>

<p>I was then informed about this:</p>

<blockquote><p>Fun fact: &#8220;find -name -type&#8221; is way faster than &#8220;find -type -name&#8221; because it avoids doing a stat() call if the name doesn&#8217;t match. stat() on a file that isn&#8217;t already in RAM likely triggers a seek and can take beaucoup milliseconds.</p></blockquote>

<p>Which is an awesome tip from a person who had been reading the blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Quote]]></title>
    <link href="http://geopet.github.com/blog/2011/04/03/object-quote/"/>
    <updated>2011-04-03T10:00:00-06:00</updated>
    <id>http://geopet.github.com/blog/2011/04/03/object-quote</id>
    <content type="html"><![CDATA[<blockquote><p>An object is a container of properties, where a property has a name and a value.</p></blockquote>

<p>Douglas Crockford, <em>JavaScript: The Good Parts</em></p>

<p>Nice and succinct.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In Search of the Open Source Project]]></title>
    <link href="http://geopet.github.com/blog/2011/03/18/in-search-of-the-open-source-project/"/>
    <updated>2011-03-18T16:30:00-06:00</updated>
    <id>http://geopet.github.com/blog/2011/03/18/in-search-of-the-open-source-project</id>
    <content type="html"><![CDATA[<p>Something I wanted to get under my belt this year was to take on a
significant role in an open source project. I&#8217;ve built a major part of
my career around the results of open source work: I am a PHP programmer
and I rarely work in any other environment other than Linux, and it
would be nice to be able to give something back to that community that
has helped put food on my table.</p>

<p>There are a lot of options out there. <a href="http://www.drupal.org">Drupal</a>
seemed like a natural fit for me, as I&#8217;ve spent a significant part of
the last several months honing my Drupal skills. But what I really want
to do is build my experience in another programming language while
working on an open source project.</p>

<p>Another goal I had this year was to build an expertise in Objective-C,
but Objective-C open source projects are hard to find. I&#8217;m also
interested in building on my Ruby skills and my Python skills, but Ruby
over Python.</p>

<p>So with these requirements, I&#8217;m going to spend time looking for a Ruby
open source project that I&#8217;ll be able to join in on.</p>

<p>There are a couple of other pieces to this undertaking for me, though.
The first is to get a feel for the open source community. Frankly, I
don&#8217;t know it as well as I would like. I know how I do code reviews in
my own work, and I also know what it means to commit to a project in my
own mind, but I want to get a better understanding of how it works in a
community open source project, as it will likely be rather different
than what I&#8217;m used to.</p>

<p>The other piece is where to find a project that will suit my interests.
I plan on starting my search in <a href="http://github.com">GitHub</a>, but I
haven&#8217;t ruled out <a href="http://sourceforge.net">Sourceforge</a>. Regardless,
when I find something I&#8217;ll mention my work on it here. Frankly, I
haven&#8217;t given up on the idea of working on a Drupal module either. But
if anyone knows of an interesting project that wouldn&#8217;t mind having a
slightly better than novice Ruby programmer who is interested in
starting small with some doing some bug fixes, let me know.</p>

<p>More on this soon, I hope. And I apologize in advance if I decide to use
this forum to point to interesting potential projects.</p>
]]></content>
  </entry>
  
</feed>
